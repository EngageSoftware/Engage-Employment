<?xml version="1.0"?>
<!-- targets to be executed, when omitted from command line default is run -->
<!--EXTERNAL_PROPERTIES: sys.env.windir-->
<project name="EngageEmployment" default="BuildAndZip" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
  <target name="init">
    <property name="nant.settings.currentframework" value="net-2.0" />

    <!-- This is where your packaged zips will build to from within the module folder -->
    <property name="package.dir" value="package" overwrite="false" />

    <!-- This is where your resource.zip will be built so it can be zipped and distributed with the release install zips -->
    <property name="resourcezip.dir" value="ResourceZip" />
    <property name="bin.dir" value="../../bin" />
    <property name="controls.dir" value="controls" />
    <property name="localresource.dir" value="App_LocalResources" />
    <property name="globalresource.dir" value="App_GlobalResources" />

    <property name="binZip" value="_Install" />
    <property name="srcZip" value="_Source" />

    <property name="rootWeb" value="http://localhost/" overwrite="false" />
    <property name="webAlias" value="DotNetNuke_2" overwrite="false" />
    <property name="verbose" value="false" overwrite="false" />

    <!-- ModuleName value should be set specific to the project -->
    <property name="ModuleName" value="Employment"  overwrite="false"  />
    <property name="subproject.name" value="Engage${ModuleName}"/>
    <property name="module.dll" value="${bin.dir}/Engage${ModuleName}.dll" />

    <property name="debug" value="false" overwrite="false" />
    <property name="config" value="debug" if="${debug}" />
    <property name="config" value="release" unless="${debug}" />

    <!--sysinfo /-->

    <if test="${verbose}">
      <echo message="solutionName: ${subproject.name}" />
      <echo message="debug:        ${debug}" />
      <echo message="config:       ${config}" />
    </if>

  </target>

  <target name="Compile" depends="init">
    <exec program="${environment::get-variable('WINDIR')}\Microsoft.NET\Framework\v2.0.50727\msbuild.exe" failonerror="true">
      <arg value="${subproject.name}.sln" />
      <arg value="/p:Configuration=Release" />
      <arg value="/p:Platform=&quot;Any CPU&quot;" />
    </exec>
  </target>

  <!-- It is important that this target does not run before the Compile target since it will lock the assembly -->
  <target name="VersionInfo" >
    <property name="version" value="${assemblyname::get-version(assembly::get-name(assembly::load-from-file(module.dll)))}" />
    <property name="shortVersion" value="${string::substring(version,0,string::last-index-of(version,'.'))}" />

    <if test="${verbose}">
      <echo message="shortVersion: ${shortVersion}" />
      <echo message="version: ${version}" />
    </if>

  </target>

  <target name="CleanPackageBin" depends="init VersionInfo">
    <delete file="${package.dir}/${ModuleName}_${shortVersion}${binZip}.zip" if="${file::exists('${package.dir}/${ModuleName}_${shortVersion}${binZip}.zip')}" />
  </target>

  <target name="CleanPackageSource" depends="init VersionInfo">
    <delete file="${package.dir}/${ModuleName}_${shortVersion}${srcZip}.zip" if="${file::exists('${package.dir}/${ModuleName}_${shortVersion}${srcZip}.zip')}" />
  </target>

  <target name="CleanPackageAll" depends="init">
    <delete dir="${package.dir}" if="${directory::exists(package.dir)}" />
  </target>

  <!-- check for resourcezip folder, delete it and its contents if it exists -->
  <target name="CleanResourceZip" depends="init">
    <delete dir="${resourcezip.dir}" if="${directory::exists(resourcezip.dir)}" />
  </target>




  <!-- Begin area for creating resourcezip for installable PA zips (should depend on target that clears where this will build zip file to)-->
  <target name="CreateResourceZip" depends="CleanResourceZip">
    <!-- create a flat directory to zip for install -->
    <mkdir dir="temp" unless="${directory::exists('temp')}" />
    <!-- DO NOT flatten this as we want to retain folder structure in this and ONLY this zip -->
    <copy todir="temp" flatten="false">
      <fileset>
        <!-- Tell nant what files to grab -->
        <!-- everything included here ends up in resource.zip, this should be excluded in the CreateBinZip -->
        <!--<include name="**/images/*" />
        <include name="**/Resources/**/*" />
        <include name="**/Docs/*.pdf" />-->
        <include name="**/js/**/*" />
        <include name="**/${localresource.dir}/*.resx" />
        <include name="**/${globalresource.dir}/*.resx" />
        <include name="**/${globalresource.dir}/*.xml" />
        <include name="**/*.ascx" />
        <include name="**/*.css" />
        <include name="**/*.aspx" />
        <exclude name="**/DNNDebug.aspx" />
        <exclude name="**/Resources.zip" />
        <exclude name="**/Install/**/*" />
        <exclude name="**/_sgbak/*" />
        <exclude name="**/thumbs.db" />
        <exclude name="**/*.zip" />
        <exclude name="**/docs/images/*" />

      </fileset>
    </copy>

    <mkdir dir="${resourcezip.dir}" unless="${directory::exists(resourcezip.dir)}" />
    <zip zipfile="${resourcezip.dir}/Resources.zip">
      <fileset basedir="temp">
        <include name="**/*" />
        <exclude name="**/*.dll" />

      </fileset>
    </zip>

    <!--Delete temp directory -->
    <delete dir="temp" failonerror="false" />

  </target>
  <!-- End area for resourcezip creation -->

  <!-- Begin area for creating resourcezip for installable PA zips (should depend on target that clears where this will build zip file to)-->
  <target name="CreateResourceSourceZip" depends="CleanResourceZip">
    <!-- create a flat directory to zip for install -->
    <mkdir dir="temp" unless="${directory::exists('temp')}" />
    <!-- DO NOT flatten this as we want to retain folder structure in this and ONLY this zip -->
    <copy todir="temp" flatten="false">
      <fileset>
        <!-- Tell nant what files to grab -->
        <!-- everything included here ends up in resource.zip, this should be excluded in the CreateBinZip -->
        <!--<include name="**/images/*" />
        <include name="**/Themes/**/*" />
        <include name="**/Resources/**/*" />
        <include name="**/Documentation/**" />-->
        <include name="**/js/**/*" />
        <include name="**/${localresource.dir}/*.resx" />
        <include name="**/${globalresource.dir}/*.resx" />
        <include name="**/${globalresource.dir}/*.xml" />
        <include name="**/*.ascx" />
        <include name="**/*.aspx" />
        <include name="**/*.cs" />
        <include name="**/*.sln" />
        <include name="**/*.csproj" />
        <include name="**/*.build" />
        <include name="**/*.css" />
        <include name="**/*.dnn" />
        <exclude name="**/DNNDebug.aspx" />
        <exclude name="**/Install/**/*" />
        <exclude name="**/_sgbak/*" />
        <exclude name="**/thumbs.db" />
        <exclude name="**/*.zip" />
        <exclude name="**/04.03.02.txt" />
      </fileset>
    </copy>

    <mkdir dir="${resourcezip.dir}" unless="${directory::exists(resourcezip.dir)}" />
    <zip zipfile="${resourcezip.dir}/Resources.zip">
      <fileset basedir="temp">
        <include name="**/*" />
        <exclude name="**/*.dll" />

      </fileset>
    </zip>

    <!--Delete temp directory -->
    <delete dir="temp" failonerror="false" />

  </target>
  <!-- End area for resourceSourcezip creation -->

  <!-- Begin area for creating installable PA (should depend on target that clears where this will build zip file to AND resourcezip as this is part of installable PA)-->
  <target name="CreateStdBinZip" depends="CleanPackageBin CreateResourceZip">
    <!-- DO flatten this as we want to retain folder structure in this and ONLY this zip -->
    <copy todir="temp" flatten="true">
      <fileset>
        <include name="**${resourcezip.dir}/Resources.zip" />
        <include name="${module.dll}" />
        <include name="**/References/*.dll" />
        <include name="**/*.sqldataprovider" />
        <include name="**/*.dnn" />
        <include name="**/JobGroupAdmin.ascx" />
        <include name="**/licenses/EULA-Standard.txt" />

        <exclude name="**/References/DotNetNuke.dll"/>
        <exclude name="**/References/DotNetNuke.WebUtility.dll"/>
        <exclude name="**/References/Microsoft.ApplicationBlocks.Data.dll"/>
        <exclude name="**/DNNDebug.aspx" />
        <exclude name="**/engage.${ModuleName}.dnn" />
        <exclude name="**/BuildSupport/**/*" />
      </fileset>
    </copy>

    <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
    <zip zipfile="${package.dir}/${ModuleName}_Standard_${shortVersion}${binZip}.zip">
      <fileset basedir="temp">
        <include name="**/*" />
      </fileset>
    </zip>

    <!--Delete temp directory -->
    <delete dir="temp" failonerror="false" />
  </target>

  <target name="CreateProBinZip" depends="CleanPackageBin CreateResourceZip">
    <!-- DO flatten this as we want to retain folder structure in this and ONLY this zip -->
    <copy todir="temp" flatten="true">
      <fileset>
        <include name="**${resourcezip.dir}/Resources.zip" />
        <include name="${module.dll}" />
        <include name="**/References/*.dll" />
        <include name="**/*.sqldataprovider" />
        <include name="**/*.dnn" />
        <include name="**/JobGroupAdmin.ascx" />
        <include name="**/licenses/EULA-Professional.txt" />

        <exclude name="**/References/DotNetNuke.dll"/>
        <exclude name="**/References/DotNetNuke.WebUtility.dll"/>
        <exclude name="**/References/Microsoft.ApplicationBlocks.Data.dll"/>
        <exclude name="**/DNNDebug.aspx" />
        <exclude name="**/engage.${ModuleName}.dnn" />
        <exclude name="**/BuildSupport/**/*" />
      </fileset>
    </copy>

    <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
    <zip zipfile="${package.dir}/${ModuleName}_Professional_${shortVersion}${binZip}.zip">
      <fileset basedir="temp">
        <include name="**/*" />
      </fileset>
    </zip>

    <!--Delete temp directory -->
    <delete dir="temp" failonerror="false" />
  </target>
  
  <target name="CreateEntBinZip" depends="CleanPackageBin CreateResourceZip">
    <!-- DO flatten this as we want to retain folder structure in this and ONLY this zip -->
    <copy todir="temp" flatten="true">
      <fileset>
        <include name="**${resourcezip.dir}/Resources.zip" />
        <include name="${module.dll}" />
        <include name="**/References/*.dll" />
        <include name="**/*.sqldataprovider" />
        <include name="**/*.dnn" />
        <include name="**/JobGroupAdmin.ascx" />
        <include name="**/licenses/EULA-Enterprise.txt" />

        <exclude name="**/References/DotNetNuke.dll"/>
        <exclude name="**/References/DotNetNuke.WebUtility.dll"/>
        <exclude name="**/References/Microsoft.ApplicationBlocks.Data.dll"/>
        <exclude name="**/DNNDebug.aspx" />
        <exclude name="**/engage.${ModuleName}.dnn" />
        <exclude name="**/BuildSupport/**/*" />
      </fileset>
    </copy>

    <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
    <zip zipfile="${package.dir}/${ModuleName}_Enterprise_${shortVersion}${binZip}.zip">
      <fileset basedir="temp">
        <include name="**/*" />
      </fileset>
    </zip>

    <!--Delete temp directory -->
    <delete dir="temp" failonerror="false" />
  </target>
  <!-- End area for installable PA -->

  <!-- Begin area for distributable source code zip (should depend on target that clears where this will build zip file to)-->
  <target name="CreateEntSrcZip" depends="CleanPackageSource CreateResourceSourceZip">
    <!-- DO flatten this as we want to retain folder structure in this and ONLY this zip -->
    <copy todir="temp" flatten="true">
      <fileset>
        <include name="**${resourcezip.dir}/Resources.zip" />
        <include name="${module.dll}" />
        <include name="**/References/*.dll" />
        <include name="**/*.sqldataprovider" />
        <include name="**/*.dnn" />
        <include name="**/JobGroupAdmin.ascx" />
        <include name="**/licenses/EULA-Enterprise.txt" />

        <exclude name="**/References/DotNetNuke.dll"/>
        <exclude name="**/References/DotNetNuke.WebUtility.dll"/>
        <exclude name="**/References/Microsoft.ApplicationBlocks.Data.dll"/>
        <exclude name="**/DNNDebug.aspx" />
        <exclude name="**/engage.${ModuleName}.dnn" />
        <exclude name="**/BuildSupport/**/*" />
      </fileset>
    </copy>

    <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
    <zip zipfile="${package.dir}/${ModuleName}_Enterprise_${shortVersion}${srcZip}.zip">
      <fileset basedir="temp">
        <include name="**/*" />
      </fileset>
    </zip>

    <!--Delete temp directory -->
    <delete dir="temp" failonerror="false" />
  </target>
  <!-- End area for distributable source code zip -->

  <!-- Begin area for Enterprise zip (containing Enterprise bin & src)-->
  <target name="CreateEntZip" depends="CleanPackageSource CreateResourceSourceZip">
    <!-- DO flatten this as we want to retain folder structure in this and ONLY this zip -->
    <copy todir="temp" flatten="true">
      <fileset>
        <include name="${package.dir}/${ModuleName}_Enterprise_${shortVersion}${binZip}.zip" />
        <include name="${package.dir}/${ModuleName}_Enterprise_${shortVersion}${srcZip}.zip" />
      </fileset>
    </copy>

    <mkdir dir="${package.dir}" unless="${directory::exists(package.dir)}" />
    <zip zipfile="${package.dir}/${ModuleName}_Enterprise_${shortVersion}.zip">
      <fileset basedir="temp">
        <include name="**/*" />
      </fileset>
    </zip>

    <!--Delete temp directory -->
    <delete dir="temp" failonerror="false" />
  </target>
  <!-- End area for Enterprise zip -->

  <!--  SYNTHETIC TASKS  -->
  <target name="build" depends="Compile" description="This target compiles the application.
	" />

  <target name="BuildAndZip" depends="build CreateEntSrcZip CreateEntBinZip CreateStdBinZip CreateProBinZip CreateEntZip" description="This target compiles the application and then creates two-three zip files: 
	              - one that only contains the compiled code and runtime files 
		      - one is the resourceszip for installable pa's
	              - the other with compiled code and source code.
	" />

</project>