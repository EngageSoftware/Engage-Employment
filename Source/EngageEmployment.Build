<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://nant.sf.net/release/0.92/nant.xsd" name="Engage Build Script" basedir="." default="package">
  <property name="projectName" value="Employment"/>
  <property name="versions" value="5,5.2+"/>
  <property name="licenses" value="Free"/>
  <property name="packageFileNameTemplate" value="${projectName}_${projectVersion}_${packageType}_DNN${dnnVersion}" dynamic="true"/>
  <property name="createSourcePackage" value="true"/>
  <property name="sourcePackageLicenseName" value="Free"/>
  <property name="combineSourceWithInstallPackage" value="false"/>
  <property name="projectDllName" value="Engage${projectName}.dll" />
  <property name="solutionFile" value="Engage${projectName}.sln"/>
  <property name="binDirectory" value="..\..\bin" overwrite="false"/> <!-- binDirectory is readonly if set from the command line (i.e. during Team Build CI) -->
  <property name="currentBinDirectory" value="${binDirectory}"/>
  <property name="projectDll" value="${binDirectory}\${projectDllName}"/>
  <patternset id="projectAssemblies">
    <include name="${projectDll}"/>
  </patternset>
  
  <property name="testBuild" value="true" overwrite="false"/> <!-- testBuild is true if building from Visual Studio, false from Team Build (CI) -->
  <property name="projectConfig" value="release"/>
  <!--property name="projectConfig" value="Debug" if="${testBuild}"/-->
  <property name="zipLevel" value="9"/>
  <property name="zipLevel" value="1" if="${testBuild}"/>
  <property name="referencesDirectory" value="References"/>
  <property name="packageDirectory" value="package"/>
  <property name="packageName" value="Resources.zip"/>

  <target name="package" description="Creates packages for this module, one for each value in the licenses and versions properties">

    <call target="build"/>

    <property name="assemblyFile" value="${projectDll}"/>
    <call target="set-assemblyVersion"/>
    <property name="projectVersion" value="${assemblyVersion}"/>

    <call target="clean-package-folder"/>
    <call target="setup-package-files"/>
    <call target="create-resources-zip"/>

    <property name="includeSource" value="false"/>
    <foreach item="String" in="${licenses}" delim="," property="packageLicense">
      <call target="create-packages"/>
    </foreach>

    <if test="${createSourcePackage}">
      <property name="includeSource" value="true"/>
      <property name="packageLicense" value="${sourcePackageLicenseName}"/>
      <call target="add-sources-to-resource-zip"/>
      <call target="create-packages"/>

      <if test="${combineSourceWithInstallPackage}">
        <foreach item="String" in="${versions}" delim="," property="dnnVersion">
          <call target="combine-source"/>
        </foreach>
      </if>
    </if>
    
    <call target="cleanup"/>
  </target>
  <target name="set-assemblyVersion" description="Sets the assemblyVersion property to the first three numbers from the version of the assembly specified by the assemblyFile property">
    <property name="assemblyVersion" value="${format::version-info(fileversioninfo::get-version-info(assemblyFile))}" />
  </target>
  <target name="build" description="Builds solutionFile">
      <exec program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" failonerror="true">
        <arg value="${solutionFile}" />
        <arg value="/p:Configuration=${projectConfig}" />
        <arg value="/p:Platform=&quot;Any CPU&quot;" />
        <arg value="/p:OutputPath=&quot;${currentBinDirectory}&quot;" />
        <arg value="/m" /> <!-- multicore -->
      </exec>
  </target>
  <target name="clean-package-folder" description="Deletes all temporary files from package directory, then re-creates the folders to use">
    <mkdir dir="${packageDirectory}" failonerror="false"/>
    <delete dir="${packageDirectory}/temp/resources" failonerror="false"/>
    <delete dir="${packageDirectory}/temp" failonerror="false"/>
    <mkdir dir="${packageDirectory}/temp" failonerror="false" />
    <mkdir dir="${packageDirectory}/temp/resources" failonerror="false" />
    <mkdir dir="${packageDirectory}/temp/package" failonerror="false"/>
  </target>
  <target name="setup-package-files" description="Copies common package files to the temp/package directory, and sets version-dependent attributes in the DNN 4 and DNN 5 manifest files">
    <property name="releaseNotesFile" value="ReleaseNotes_${projectVersion}.htm"/>
    <copy todir="${packageDirectory}/temp/package" flatten="true">
      <fileset>
        <include name="${releaseNotesFile}"/>
        <include name="??.??.??.txt" />
        <include name="ReadMe.txt" />
        <include name="**/*.SqlDataProvider"/>
        <include name="**/*.4.dnn"/>
        <include name="**/*.5.dnn"/>
      </fileset>
    </copy>
    <copy todir="${packageDirectory}/temp/package/bin" flatten="true">
      <fileset>
        <patternset refid="projectAssemblies" />
        <include name="${referencesDirectory}/**/*.dll"/>
        <exclude name="${referencesDirectory}/DotNetNuke.dll"/>
        <exclude name="${referencesDirectory}/DotNetNuke.*.dll"/>
        <exclude name="${referencesDirectory}/Microsoft.ApplicationBlocks.Data.dll"/>
        <exclude name="${referencesDirectory}/System.Web.Extensions.dll"/>
        <exclude name="${referencesDirectory}/*.Design.dll"/>
        <exclude name="${referencesDirectory}/Framework/Engage.Events.dll"/>
        <exclude name="${referencesDirectory}/Framework/EvolutionaryAlgorithms.dll"/>
        <!--<exclude name="${referencesDirectory}/Telerik.Web.UI.dll"/>-->
      </fileset>
    </copy>

    <attrib readonly="false">
      <fileset basedir="${packageDirectory}/temp/package">
        <include name="**"/>
      </fileset>
    </attrib>

    <if test="${file::exists(packageDirectory + '/temp/package/Engage' + projectName + '.5.dnn')}">
      <xmlpoke file="${packageDirectory}/temp/package/Engage${projectName}.5.dnn" value="${releaseNotesFile}" xpath="dotnetnuke/packages/package/releaseNotes/@src" failonerror="false" />
      <xmlpoke file="${packageDirectory}/temp/package/Engage${projectName}.5.dnn" value="${projectVersion}" xpath="dotnetnuke/packages/package/@version" failonerror="false" />
      <xmlpoke file="${packageDirectory}/temp/package/Engage${projectName}.5.dnn" value="${projectVersion}" xpath="//*[@latestVersion='latestVersion']" failonerror="false" />
      
      <foreach item="File" in="${packageDirectory}/temp/package/bin" property="assemblyFile">
        <call target="set-assemblyVersion"/>
        <xmlpoke file="${packageDirectory}/temp/package/Engage${projectName}.5.dnn" value="${assemblyVersion}" xpath="dotnetnuke/packages/package/components/component[@type='Assembly']/assemblies/assembly[name='${path::get-file-name(assemblyFile)}']/version" failonerror="false" />
      </foreach>
      
      <copy file="${packageDirectory}/temp/package/Engage${projectName}.5.dnn" tofile="${packageDirectory}/temp/package/Engage${projectName}.5.2+.dnn"/>
      <xmlstrip file="${packageDirectory}/temp/package/Engage${projectName}.5.2+.dnn" xpath="dotnetnuke/packages/package/components/component[@type='Assembly']/assemblies/assembly[name='Telerik.Web.UI.dll']"/>
    </if>
    <if test="${file::exists(packageDirectory + '/temp/package/Engage' + projectName + '.4.dnn')}">
      <xmlpoke file="${packageDirectory}/temp/package/Engage${projectName}.4.dnn" value="${projectVersion}" xpath="//*[@latestVersion='latestVersion']" failonerror="false" />
    </if>
  </target>
  <target name="create-resources-zip" description="Creates the Resources.zip file for content (Install package) files">
    <copy todir="${packageDirectory}/temp/resources" flatten="false">
      <fileset>
        <patternset refid="content.fileset"/>
        <exclude name="${packageDirectory}/**"/>
      </fileset>
    </copy>

    <zip zipfile="${packageDirectory}/temp/package/${packageName}" ziplevel="${zipLevel}">
      <fileset basedir="${packageDirectory}/temp/resources">
        <include name="**/*"/>
      </fileset>
    </zip>
  </target>
  <target name="create-packages" description="For the given license and type, creates packages for DNN 4 and DNN 5">
    <property name="licenseFile" value="EULA-${packageLicense}"/>
    <call target="switch-license"/>

    <foreach item="String" in="${versions}" delim="," property="dnnVersion">
      <call target="zip-package"/>
    </foreach>
  </target>
  <target name="switch-license" description="Switches out the license file and updates the reference to it in the DNN 5 manifest file">
    <delete>
      <fileset>
        <include name="${packageDirectory}/temp/package/EULA-*"/>
      </fileset>
    </delete>
    <copy todir="${packageDirectory}/temp/package" flatten="true">
      <fileset>
        <include name="Licenses/${licenseFile}.*"/>
      </fileset>
    </copy>

    <if test="${file::exists(packageDirectory + '/temp/package/Engage' + projectName + '.5.dnn')}">
      <xmlpoke file="${packageDirectory}/temp/package/Engage${projectName}.5.dnn" value="${licenseFile}.htm" xpath="dotnetnuke/packages/package/license/@src" failonerror="false" />
    </if>

    <if test="${file::exists(packageDirectory + '/temp/package/Engage' + projectName + '.5.2+.dnn')}">
      <xmlpoke file="${packageDirectory}/temp/package/Engage${projectName}.5.2+.dnn" value="${licenseFile}.htm" xpath="dotnetnuke/packages/package/license/@src" failonerror="false" />
    </if>
  </target>
  <target name="zip-package" description="Zips up the files in the temp/package directory, getting the correct manifest file and using the correct naming convention">
    <property name="packageType" value="Install"/>
    <property name="packageType" value="Source" if="${includeSource}"/>
    <zip zipfile="${packageDirectory}/${packageFileNameTemplate}.zip">
      <fileset basedir="${packageDirectory}/temp/package">
        <include name="**/*"/>
        <exclude name="**/*.4.dnn" if="${dnnVersion!='4'}"/>
        <exclude name="**/*.5.dnn" if="${dnnVersion!='5'}"/>
        <exclude name="**/*.5.2+.dnn" if="${dnnVersion!='5.2+'}"/>
        <exclude name="**/Telerik.Web.UI.dll" if="${dnnVersion=='5.2+'}"/>
      </fileset>
    </zip>
  </target>
  <target name="add-sources-to-resource-zip" description="Adds the files for the Source package to the Resources.zip file">
    <copy todir="${packageDirectory}/temp/resources" flatten="false">
      <fileset>
        <patternset refid="source.fileset"/>
        <exclude name="${packageDirectory}/**"/>
      </fileset>
    </copy>

    <zip zipfile="${packageDirectory}/temp/package/${packageName}" ziplevel="${zipLevel}">
      <fileset basedir="${packageDirectory}/temp/resources">
        <include name="**/*"/>
      </fileset>
    </zip>
  </target>
  <target name="combine-source" description="Combines the Install and Source packages with the same license into one .zip file">
    <property name="packageType" value="Install"/>
    <property name="installPackageFileName" value="${packageFileNameTemplate}"/>
    <property name="packageType" value="Source"/>
    <property name="sourcePackageFileName" value="${packageFileNameTemplate}"/>
    <zip zipfile="${packageDirectory}/${projectName}_${projectVersion}.zip">
      <fileset basedir="${packageDirectory}">
        <include name="${installPackageFileName}.zip"/>
        <include name="${sourcePackageFileName}.zip"/>
      </fileset>
    </zip>

    <delete file="${packageDirectory}/${installPackageFileName}.zip" failonerror="false"/>
    <delete file="${packageDirectory}/${sourcePackageFileName}.zip" failonerror="false"/>
  </target>
  <target name="cleanup" description="Deletes temporary files">
    <delete file="${packageDirectory}\${packageName}" failonerror="false"/>
    <delete dir="${packageDirectory}\temp" failonerror="false"/>
  </target>
  <script language="C#" prefix="xml">
    <!-- Based on http://stackoverflow.com/questions/537988/how-can-i-use-nants-xmlpoke-target-to-remove-a-node -->
    <references>
      <include name="System.Xml.dll" />
    </references>
    <imports>
      <import namespace="System"/>
      <import namespace="System.IO"/>
      <import namespace="System.Xml"/>
    </imports>
    <code>
      <![CDATA[
              [TaskName("xmlstrip")]
              public class XmlStrip : Task
              {
                  private string xPath;
                  
                  private FileInfo xmlFile;
              
                  [TaskAttribute("xpath", Required = true), StringValidator(AllowEmpty = false)]
                  public string XPath 
                  { 
                      get
                      {
                          return this.xPath;
                      }
                      
                      set
                      {
                          this.xPath = value;
                      }
                  }

                  [TaskAttribute("file", Required = true)]
                  public FileInfo XmlFile 
                  { 
                      get
                      {
                          return this.xmlFile;
                      }
                      
                      set
                      {
                          this.xmlFile = value;
                      }
                  }

                  protected override void ExecuteTask()
                  {
                      string filename = XmlFile.FullName;
                      Log(Level.Info, "Attempting to load XML document in file '{0}'.", filename );
                      XmlDocument document = new XmlDocument();
                      document.Load(filename);
                      Log(Level.Info, "XML document in file '{0}' loaded successfully.", filename );

                      XmlNode node = document.SelectSingleNode(XPath);
                      if(null == node)
                      {
                          throw new BuildException(String.Format("Node not found by XPath '{0}'", XPath));
                      }

                      node.ParentNode.RemoveChild(node);

                      Log(Level.Info, "Attempting to save XML document to '{0}'.", filename );
                      document.Save(filename);
                      Log(Level.Info, "XML document successfully saved to '{0}'.", filename );
                  }
              }
      ]]>
    </code>
  </script>
  <script language="C#" prefix="format" >
    <references>
      <include name="System.dll" />
    </references>
    <imports>
      <import namespace="System.Diagnostics"/>
      <import namespace="System.Globalization"/>
    </imports>
    <code>
      <![CDATA[
              [Function("version-info")]
              public static string FormatVersionInfo(FileVersionInfo fileVersionInfo) {
                  
                  return string.Format(CultureInfo.InvariantCulture, "{0:00}.{1:00}.{2:00}", fileVersionInfo.FileMajorPart, fileVersionInfo.FileMinorPart, fileVersionInfo.FileBuildPart);
              }
            ]]>
    </code>
  </script>
  <patternset id="content.fileset">
    <include name="**/*.ascx" />
    <include name="**/*.aspx" />
    <include name="**/*.asmx" />
    <include name="**/*.resx" />
    <include name="**/*.html" />
    <include name="**/*.htm" />
    <include name="**/*.css" />
    <include name="**/*.jpg" />
    <include name="**/*.gif" />
    <include name="**/*.png" />
    <include name="**/*.pdf" />
    <include name="**/*.xml" />
    <include name="**/*.xsd" />
    <exclude name="Licenses/EULA-*"/>
    <exclude name="ReleaseNotes_*.htm"/>
    <exclude name="??.??.??.txt" />
    <exclude name="_ReSharper.*/**"/>
    <exclude name="**/obj/**"/>
    <exclude name="${referencesDirectory}/**"/>
  </patternset>
  <patternset id="source.fileset">
    <include name="**/*.js"/>
    <include name="**/*.cs"/>
    <include name="**/*.vb"/>
    <include name="**/*.sln"/>
    <include name="**/*.csproj"/>
    <include name="**/*.vbproj"/>
    <include name="**/*.build"/>
    <include name="**/*.dnn"/>
    <include name="**/*.docx"/>
    <include name="**/*.config"/>
    <include name="**/*.dbml"/>
    <include name="**/*.dbml.layout"/>
    <include name="**/*.rpx"/>
    <include name="**/*.txt"/>
    <include name="Licenses/EULA-*"/>
    <include name="ReleaseNotes_*.htm"/>
    <include name="??.??.??.txt" />
    <include name="MSBuild/*.dll"/>
    <include name="MSBuild/*.targets"/>
    <exclude name="**/obj/**"/>
    <exclude name="Release.txt"/>
  </patternset>
</project>