<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Engage.Framework</name>
    </assembly>
    <members>
        <member name="T:Engage.AffectedObjectsContainer">
            <summary>
            Summary description for AffectedObjectsContainer.
            </summary>
        </member>
        <member name="T:Engage.IAffectedObjectsContainer">
            <summary>
            Summary description for IAffectedObjectsContainer.
            </summary>
        </member>
        <member name="T:Engage.Authentication.IMembershipUserContainer">
            <summary>
            This interface is the common reference type between Engage and ASPNET/DNN Membership users.
            </summary>
        </member>
        <member name="M:Engage.Entities.IEntity.IsSaveable">
            <summary>
            Is this <code>Entity</code> saveable to the database. At this level, is the object's state been changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.IEntity.IsValid">
            <summary>
            Is this <code>Entity</code>'s state valid. By default, it is.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.IEntity.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.IEntity.ToString">
            <summary>
            Please tell me you don't have to actually do this.HK
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engage.Entities.IEntity.IsLoaded">
            <summary>
            Has this instance been loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.IEntity.IsDirty">
            <summary>
            Has the state of this instance changed since being loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.IEntity.IsNew">
            <summary>
            Is this instance a newly created object, not belonging to the database
            </summary>
        </member>
        <member name="T:Engage.Attributes.IAttributeContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Entities.IEntityContainer.AddAffiliation(Engage.Entities.IEntityContainer)">
            <summary>
            Affiliate child to this <code>EntityContainer</code>. The type is determined by the type of child.
            </summary>
            <param name="child">The <code>EntityContainer</code> instance to add</param>
        </member>
        <member name="T:Engage.Authentication.SecureContainer">
            <summary>
            This represents a Secure Container in the WinForms treeview application.
            </summary>
        </member>
        <member name="T:Engage.Entities.Composite">
            <summary>
            This object reprents a <code>EntityContainer</code> that supports children
            </summary>
        </member>
        <member name="T:Engage.Entities.EntityContainer">
            <summary>
            Summary description for EntityContainer.
            </summary>
        </member>
        <member name="M:Engage.Entities.Entity.#ctor">
            <summary>
            This constructor creates an empty <code>Entity</code> that is not yet part of the database. IE: Creating a new object.
            </summary>
        </member>
        <member name="M:Engage.Entities.Entity.IsSaveable">
            <summary>
            Is this <code>Entity</code> saveable to the database. At this level, is the object's state been changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Entity.IsValid">
            <summary>
            Is this <code>Entity</code>'s state valid. By default, it is.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Entity.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.Entity.BeginLoad">
            <summary>
            Used primarily when loading an object from the db to prevent the object from being set to dirty
            </summary>
        </member>
        <member name="M:Engage.Entities.Entity.EndLoad">
            <summary>
            Used primarily when loading an object from the db is complete, to allow the dirty mechanism to function normally
            </summary>
        </member>
        <member name="P:Engage.Entities.Entity.IsLoaded">
            <summary>
            Has this instance been loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.Entity.IsDirty">
            <summary>
            Has the state of this instance changed since being loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.Entity.IsNew">
            <summary>
            Is this instance a newly created object, not belonging to the database
            </summary>
        </member>
        <member name="T:Engage.Entities.Entity.VersionManager">
            <summary>
            Version Manager inner class.
            </summary>
        </member>
        <member name="T:Engage.Util.IRequiresCleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.EntityContainer.RemoveAffiliations(Engage.Entities.IEntityContainer)">
            <summary>
            Removes child 
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Engage.Entities.EntityContainer.RemoveAffiliations">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.RemoveAffiliations(Engage.Affiliations.EngageAffiliationType)">
            <summary>
            Removes all children of the specified type
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.GetParent(System.Int32)">
            <summary>
            This method is provided for situations where you don't know the parent's type but you do have
            a common AffiliationType for parents. 
            </summary>
            <remarks>Note: This method returns the first parent that is found for the specified type and does not
            recurse up.</remarks>
            <param name="affiliationTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.GetParents(Engage.Entities.EntityType)">
            <summary>
            Returns an IEntityContainer[] of parents of the given type of this object
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.LoadContainer(System.Int32)">
            <summary>
            Loads a <code>EntityContainer</code> from the database if not previously cached
            </summary>
            <param name="id">id of the <code>EntityContainer</code> to load</param>
            <returns>A loaded <code>EntityContainer</code></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.LoadContainer(System.Int32,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            
            Loads a <code>EntityContainer</code> from the database if not previously cached
            </summary>
            <param name="id">id of the <code>EntityContainer</code> to load</param>
            <param name="reload">should this objectID be reloaded from the database</param>
            <returns>A loaded <code>EntityContainer</code></returns>
            <value>value</value>
            <remarks>remarks</remarks>
            <param name="pending"></param>
            <param name="date"></param>
        </member>
        <member name="M:Engage.Entities.EntityContainer.IsSaveable">
            <summary>
            Is this <code>EntityContainer</code> saveable to the database. This is defined as all the 
            required attributes are valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.IsValid">
            <summary>
            Is this <code>EntityContainer</code>'s state valid. Defined as all attributes are valid and
            all ObjectRules are passed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.GetConsoleNode(Engage.Console.IConsoleNode)">
            <summary>
            Returns an IConsoleNode for every instance of this type. Providing this method in a subclass prevents
            defining via the database
            </summary>
            <returns></returns>
            <remarks>
            Returns an IConsoleNode for every instance of this type. Providing this method in a subclass prevents
            defining via the database
            </remarks>
            
        </member>
        <member name="M:Engage.Entities.EntityContainer.InitializeObject">
            <summary>
            Overridden by subclass to act as a 'constructor' called after the object
            is created/loaded from the db
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.CopyAttributeValues(Engage.Entities.EntityContainer,Engage.Entities.IEntityContainer)">
            <summary>
            copy all equally named attribute values from the source object to the destination object
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="P:Engage.Entities.EntityContainer.CollapsedIcon">
            <summary>
            Returns an index for every instance of this type. Providing this property in a subclass prevents
            defining via the database
            </summary>
        </member>
        <member name="P:Engage.Entities.EntityContainer.ExpandedIcon">
            <summary>
            Returns an index for every instance of this type. Providing this property in a subclass prevents
            defining via the database
            </summary>
        </member>
        <member name="M:Engage.Entities.Composite.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliations">
            <summary>
            Returns all the 'active' affiliations 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Composite.RemoveAffiliations">
            <summary>
            Removes all this <code>EntityContainer</code>'s <code>Affiliation</code>s
            </summary>
        </member>
        <member name="M:Engage.Entities.Composite.RemoveAffiliations(Engage.Affiliations.EngageAffiliationType)">
            <summary>
            Removes all the <code>Affiliation</code>s of the given type
            </summary>
        </member>
        <member name="M:Engage.Entities.Composite.RemoveAffiliations(Engage.Entities.IEntityContainer)">
            <summary>
            Removes this child from it's Affiliation
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Engage.Entities.Composite.HasChildren">
            <summary>
            Returns if this <code>EntityContainer</code> contains any child 'active' objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(Engage.Entities.EntityType,Engage.Entities.EntityType)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child types
            </summary>
            <param name="parentType">The parent object type</param>
            <param name="childType">The child object type</param>
            <returns>An <code>AffiliationDefinition</code> if found, otherwise throws an exception</returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(System.Int32,System.Int32)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child typeids
            </summary>
            <param name="parentTypeId">The object typeId of the parent object</param>
            <param name="childTypeId">The object typeId of the child object</param>
            <returns>An <code>AffiliationDefinition</code> if found, otherwise throws an exception</returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(Engage.Entities.EntityType,Engage.Entities.EntityType,System.Boolean)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child types
            </summary>
            <param name="parentType">The parent object type</param>
            <param name="childType">The child object type</param>
            <param name="throwError"><code>bool</code> indicating whether to throw an exception if a definition cannot be found</param>
            <returns>An <code>AffiliationDefinition</code> if found, null if not found, depending on the value of throwError</returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child typeids
            </summary>
            <param name="parentTypeId">The object typeId of the parent object</param>
            <param name="childTypeId">The object typeId of the child object</param>
            <param name="throwError"><code>bool</code> indicating whether to throw an exception if a definition cannot be found</param>
            <returns>An <code>AffiliationDefinition</code> if found, null if not found, depending on the value of throwError</returns>
        </member>
        <member name="T:Engage.Authentication.SecurityRole">
            <summary>
            This represents a Role in Engage (PartyRole) table.
            </summary>
        </member>
        <member name="T:Engage.Authentication.User">
            <summary>
            This object represents a User of the system which is a PartyUser and/or a ASPNET_USER row
            </summary>
        </member>
        <member name="M:Engage.Authentication.User.#ctor">
            <summary>
            Used only on web, no logged in user
            </summary>
        </member>
        <member name="T:Engage.Cache.CacheEntry">
            <summary>
            Summary description for CacheEntry.
            </summary>
        </member>
        <member name="T:Engage.Cache.DefaultCachingStrategy">
            <summary>
            This implementation provides default caching using a hashtable as the dictionary
            </summary>
        </member>
        <member name="T:Engage.Cache.ICachingStrategy">
            <summary>
            This interface is implemented by classes that provide caching.
            </summary>
        </member>
        <member name="T:Engage.Cache.HttpSessionCachingStrategy">
            <summary>
            This implementation provides caching using the web System.Web.Caching.Cache class
            </summary>
        </member>
        <member name="T:Engage.Cache.NullCache">
            <summary>
            This implementation provides no caching
            </summary>
        </member>
        <member name="T:Engage.Entities.INullEntity">
            <summary>
            This interface is implemented by objects that are null implementions of the 'real' objects
            It can then be used to test if this is a real or null implementation, in case some different
            behavior is required when the null object is encountered
            </summary>
        </member>
        <member name="T:Engage.Cache.WebCachingStrategy">
            <summary>
            This implementation provides caching using the web System.Web.Caching.Cache class
            </summary>
        </member>
        <member name="T:Engage.Communication.Email.EmailEvent">
            <summary>
            This class represents the definition of an Email created by a user.
            </summary>
        </member>
        <member name="T:Engage.Routing.RoutingEvent">
            <summary>
            This class is provided so that it may be subclassed with a specific implementation such as 
            EmailEvent. 
            </summary>
        </member>
        <member name="M:Engage.Routing.RoutingEvent.IsApproved">
            <summary>
            This method inspects the Engage_Approval table to see if a) there are any approvals there if not
            the default is approved or true and b) if there are records loop through and inspect the approved
            flag for a false. If none found true is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Communication.Email.EmailEvent.Load(System.Int32)">
            <exception cref="T:Engage.Data.DBException">If there's an error communicating with the database</exception>
        </member>
        <member name="T:Engage.Routing.RoutingTransaction">
            <summary>
            This class represents a row in Engage_RoutingTransaction and can be extended to provide custom implementations
            such as EmailRoutingTransaction to do specific tasks.
            </summary>
        </member>
        <member name="M:Engage.Routing.RoutingTransaction.GetPendingTransactions(System.Int32)">
            <exception cref="T:Engage.Data.DBException">If there is an error communicating with the database</exception>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.Save">
            <exception cref="T:Engage.Data.DBException">spInsertEmailEvent</exception>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.UpdateText(System.String,System.String)">
            <summary>
            This method should be used to replace merge field values with the <paramref name="newText"/>
            This is useful so any concrete client implementations do not need to worry 
            about the underlying HTML and text body (and any other future implementations).
            </summary>
            <param name="oldText"></param>
            <param name="newText"></param>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.IsEmailUndeliverable(System.String)">
            <exception cref="T:Engage.Data.DBException">If an error occurs while communicating with the database</exception>
        </member>
        <member name="T:Engage.Console.ConsoleNode">
            <summary>
            Summary description for ConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.IConsoleNode">
            <summary>
            Summary description for IConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.DebugTab">
            <summary>
            Summary description for DebugTab.
            </summary>
        </member>
        <member name="T:Engage.Console.PropertyTab">
            <summary>
            Summary description for PropertyTab.
            </summary>
        </member>
        <member name="F:Engage.Console.PropertyTab.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Engage.Console.PropertyTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Console.PropertyTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Engage.Console.DebugTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Console.DebugTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Engage.Console.DefaultConsoleNode">
            <summary>
            Summary description for DefaultConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.DragDataObject">
            <summary>
            Summary description for DragDataObject.
            </summary>
        </member>
        <member name="T:Engage.Console.IExplorerBarSnapIn">
            <summary>
            Summary description for IExplorerBarSnapin.
            </summary>
        </member>
        <member name="T:Engage.Console.IExplorerBarView">
            <summary>
            Summary description for IExplorerBarSnapin.
            </summary>
        </member>
        <member name="T:Engage.Console.IExplorerSnapIn">
            <summary>
            Summary description for IExplorerSnapin.
            </summary>
        </member>
        <member name="T:Engage.Console.ISnapInView">
            <summary>
            Summary description for ISnapInView.
            </summary>
        </member>
        <member name="T:Engage.Console.NullConsoleNode">
            <summary>
            Summary description for NullConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.SnapIn">
            <summary>
            This is a base abstract class used for building new SnapIns. 
            </summary>
        </member>
        <member name="T:Engage.Data.Configuration.ProviderConfigurationHandler">
            <summary>
            Handles the transformation of a provider section in the configuration file into a <see cref="T:Engage.Data.Configuration.ProviderConfiguration"/> object.
            </summary>
        </member>
        <member name="M:Engage.Data.Configuration.ProviderConfigurationHandler.CreateProviderConfiguration(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Creates a provider configuration.
            </summary>
            <param name="section">The provider section from the configuration file.</param>
            <returns>The created provider configuration object.</returns>
        </member>
        <member name="M:Engage.Data.Configuration.ProviderConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Engage.Data.DataProvider">
            <summary>
            Provides access to an implementation-specific sub-class of <see cref="T:Engage.Data.DataProvider"/> (always <see cref="T:Engage.Data.SqlDataProvider"/> currently).
            </summary>
        </member>
        <member name="F:Engage.Data.DataProvider.instance">
            <summary>
            The current instance of this <see cref="T:Engage.Data.DataProvider"/>.
            </summary>
        </member>
        <member name="P:Engage.Data.DataProvider.Instance">
            <summary>
            Gets the current instance of this <see cref="T:Engage.Data.DataProvider"/>.
            </summary>
            <value>The current instance of <see cref="T:Engage.Data.DataProvider"/>.</value>
        </member>
        <member name="T:Engage.Data.DBException">
            <summary>
            An exception to be thrown on behalf of the data source.
            </summary>
        </member>
        <member name="T:Engage.Data.SqlDataProvider">
            <summary>
            Concrete implementation of <see cref="T:Engage.Data.IDataProvider"/> for SQL Server 2000+.
            </summary>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Data.SqlDataProvider"/> class.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">[SiteSqlServer] key not found in config file</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Application is a web site but configuration file (web.config) cannot be found</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.GetPrimaryKeyColumn(System.String)">
            <exception cref="T:Engage.Data.DBException">if there is an error retrieving the primary key column from the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.CommitTransaction">
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.RollbackTransaction">
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObject(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateObject(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">rows affected == 0</exception>
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectAttribute(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateObjectAttribute(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateObjectType(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <exception cref="T:Engage.Data.DBException">Could not update entity type</exception>
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertBinaryAttribute(System.Int32,System.Int32,System.Byte[],System.String,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectAffiliation(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectAffiliation(System.Int32,System.Collections.IDictionary,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteAffiliationDefinition(System.Int32)">
            <exception cref="T:Engage.Data.DBException">Unable to update EntityAffiliationDefinition</exception>
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteObjectAffiliation(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteObjectAffiliation(System.Int32,System.Collections.IDictionary,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.HasEntityPlayedRole(System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.GetVersionNumber(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertLargeTextAttribute(System.Int32,System.Int32,System.String,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateLargeTextAttribute(System.Int32,System.String,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteLargeTextAttribute(System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectVirtualRoot(System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.IsVirtualRoot(System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.GetVirtualRootId(System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.FillDataTable(System.String,System.Data.DataTable)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="T:Engage.WebServicesGateway.WebServiceGateway">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.#ctor">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.Execute(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.ExecuteAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.ExecuteAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Engage.WebServicesGateway.WebServiceGateway.ExecuteCompleted">
            <remarks/>
        </member>
        <member name="T:Engage.WebServicesGateway.ExecuteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Engage.WebServicesGateway.ExecuteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Engage.WebServicesGateway.ExecuteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Engage.Entities.Affiliation">
            <summary>
            This object represents a relationship between two <code>DbObjectContainers</code>.
            It contains the 'other' <code>EntityContainer</code> and the <code>AffiliationType</code>
            </summary>
        </member>
        <member name="M:Engage.Entities.Affiliation.#ctor(Engage.Entities.AffiliationDefinition,System.Int32,Engage.Entities.IEntityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Entities.Affiliation"/> class.
            </summary>
            <param name="ad">The ad.</param>
            <param name="parentId">The parent id.</param>
            <param name="child">The child.</param>
        </member>
        <member name="T:Engage.Entities.AffiliationDefinition">
            <summary>
            Summary description for AffiliationDefinition.
            </summary>
            
        </member>
        <member name="T:Engage.Affiliations.AffiliationManager">
            <summary>
            Summary description for AffiliationManager.
            </summary>
        </member>
        <member name="M:Engage.Affiliations.AffiliationManager.GetCurrentAffiliations">
            <summary>
            This method return the affiliations currently in memory
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Entities.EngageDbUtil">
            <summary>
            Summary description for EngageDbUtil.
            </summary>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.IsObjectTypeRole(System.Int32)">
            <summary>
            Determines if the given objectTypeID is a Role
            </summary>
            <param name="objectTypeID">The objectTypeID to search</param>
            <returns>A <code>bool</code> indicating if the objectTypeID represents a Role</returns>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.InsertAttribute(System.Int32,System.String)">
            <summary>
            Inserts a new row into lkpAttribute
            </summary>
            <param name="typeID">AttributeTypeID, foreign key from lkpAttributeType</param>
            <param name="sDesc">sDesc, must be unique value in this table</param>
            <returns>The AttributeID of the new row</returns>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.GetItems(System.String,System.String[])">
            <summary>
            I added this to allow you to get lookup items from any table in order to
            use this you must pass in the columns in the following order:
            1. IdentityColumn
            2. ShortDescription
            3. LongDescription
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.AttributeDefinitionExists(System.Int32,System.Int32)">
            <summary>
            This method returns an Lookup array of all classes that are type Proxy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Entities.NoRecordsFoundException">
            <summary>
            Summary description for NoRecordsFoundException.
            </summary>
        </member>
        <member name="M:Engage.Attributes.EntityAttribute.SetAttributeValue(System.String)">
            <summary>
            This method is used internally to set the value of this <code>EntityAttribute</code>
            without triggering the notifications. Used primarily when loading this object
            from the database 'mbLoading'
            </summary>
            <param name="s">The value to set</param>
        </member>
        <member name="M:Engage.Attributes.EntityAttribute.SetSearchable(System.Boolean)">
            <summary>
            This method is used to set if this <code>EntityAttribute</code> should be displayed in the 
            Engage.Db.<code>DataFinder/DataFindViewer</code> object(s).
            Used internally when this <code>EntityAttribute</code> is constructed
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Engage.Attributes.EntityAttribute.Searchable">
            <summary>
            This method is used to determine if this EntityAttribute should be displayed in the 
            etg DataFinder/DataFindViewer object(s) as a searchable attribute
            </summary>
        </member>
        <member name="T:Engage.Entities.EntityInUseException">
            <summary>
            Summary description for EntityInUseException.
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Engage.Definitions.AttributeDefinitionArg.#ctor(System.String,System.String,System.Int32)">
            <summary>
            The defaults are: AttributeTypeID = AttributeType.entity.GetId() and DefinitionRequirement = DefinitionRequirement.Required.GetId()
            the ClassId is either DefaultEntityAttribute or LookupAttribute based on whether the LookupTypeId > 1.
            </summary>
            <param name="shortdescription"></param>
            <param name="defaultValue"></param>
            <param name="lookupTypeId"></param>
        </member>
        <member name="T:Engage.Definitions.EntityDefinition">
            <summary>
            Summary description for EntityDefinition.
            </summary>
        </member>
        <member name="T:Engage.Definitions.IEntityDefinition">
            <summary>
            Summary description for IEntityDefinition.
            </summary>
        </member>
        <member name="M:Engage.Definitions.IEntityDefinition.Copy(Engage.Definitions.CopyDepth)">
            <summary>
            Create a copy of the instance of this class.
            </summary>
            <param name="depth">Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</param>
            <returns></returns>
            <remarks>Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</remarks>
        </member>
        <member name="M:Engage.Definitions.IEntityDefinition.CreateDefaultAttributes">
            <summary>
            Use this method to automatically create all the default attributes for this objecttype.
            </summary>
        </member>
        <member name="T:Engage.Definitions.IAttributeDefinitionContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Definitions.EntityDefinition.Copy(Engage.Definitions.CopyDepth)">
            <summary>
            Create a copy of the instance of this class.
            </summary>
            <param name="depth">Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</param>
            <returns></returns>
            <remarks>Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</remarks>
        </member>
        <member name="M:Engage.Definitions.EntityDefinition.CopyDefinitionOnly">
            <summary>
            This method creates a new definition based on an this one without attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engage.Definitions.EntityDefinition.ExpandedIcon">
            <summary>
            Returns an index for every instance of this type. Providing this property in a subclass prevents
            defining via the database
            </summary>
        </member>
        <member name="P:Engage.Definitions.EntityDefinition.IsNew">
            <summary>
            Is this instance a newly created object, not belonging to the database
            </summary>
        </member>
        <member name="T:Engage.Definitions.DefinitionAffiliation">
            <summary>
            This object represents a relationship between two <code>DbObjectDefintions</code>.
            It contains the 'other' <code>EntityContainer</code> and the <code>AffiliationType</code>
            </summary>
        </member>
        <member name="T:Engage.Definitions.DefinitionConsoleNode">
            <summary>
            Summary description for DefinitionConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Definitions.IDefinitionConsoleNode">
            <summary>
            Summary description for IDefinitionConsoleNode.
            </summary>
        </member>
        <member name="M:Engage.Definitions.EntityAttributeDefinition.SetAttributeValue(System.String)">
            <summary>
            This method is used internally to set the value of this <code>EntityAttribute</code>
            without triggering the notifications. Used primarily when loading this object
            from the database 'mbLoading'
            </summary>
            <param name="s">The value to set</param>
        </member>
        <member name="M:Engage.Definitions.EntityAttributeDefinition.SetSearchable(System.Boolean)">
            <summary>
            This method is used to set if this <code>EntityAttribute</code> should be displayed in the 
            Engage.Db.<code>DataFinder/DataFindViewer</code> object(s).
            Used internally when this <code>EntityAttribute</code> is constructed
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Engage.Definitions.EntityAttributeDefinition.Searchable">
            <summary>
            This method is used to determine if this EntityAttribute should be displayed in the 
            etg DataFinder/DataFindViewer object(s) as a searchable attribute
            </summary>
        </member>
        <member name="T:Engage.Framework">
            <summary>
            Summary description for Framework.
            </summary>
        </member>
        <member name="M:Engage.Framework.InitStorage">
            <summary>
            Initialize the Framework's caching mechanism not to cache
            call in global.asax Application_Start
            </summary>
        </member>
        <member name="M:Engage.Framework.InitStorage(System.Web.HttpContext,Engage.Util.EngageSessionBase)">
            <summary>
            Initialize the Framework's caching mechanizm for 'web' operation, ie:Browser front end, web site
            All caches are located in each user HttpSession
            call in global.asax Application_Start
            </summary>
            <param name="context"></param>
            <param name="sessionBase"></param>
        </member>
        <member name="M:Engage.Framework.CleanupStorage">
            <summary>
            Cleanup methods, normally called by Garbage collector threads
            </summary>
        </member>
        <member name="M:Engage.Framework.ClearCaches">
            <summary>
            Clears all caches within the Framework
            </summary>
        </member>
        <member name="M:Engage.Framework.Init(Engage.Util.EngageSessionBase)">
            <summary>
            Initialize the Framework for 'normal' operation, ie:Windows client front end
            call in the Main of the application
            </summary>
            <param name="sessionBase"></param>
        </member>
        <member name="M:Engage.Framework.Init(System.Web.SessionState.HttpSessionState,Engage.Util.EngageSessionBase)">
            <summary>
            Initialize the Framework for 'web' operation, ie:Browser front end, web site
            call in global.asax Session_Start
            UserStorage located in HttpSessionState 
            </summary>
            <param name="httpSession"></param>
            <param name="engageSessionBase"></param>
        </member>
        <member name="M:Engage.Framework.SaveObjects">
            <summary>
            For saving and individual object
            </summary>
        </member>
        <member name="T:Engage.Configuration.RuntimeEnvironmentsSectionHandler">
            <summary>
            Summary description for RuntimeEnvironmentsSectionHandler.
            </summary>
        </member>
        <member name="T:Engage.Routing.RoutingEventType">
            <summary>
            Summary description for RoutingEventType.
            </summary>
        </member>
        <member name="M:Engage.Util.EngageType.#ctor(System.String,System.String)">
            <summary>
            Used to initialize a 'group' of <code>EngageType</code> subclass objects
            </summary>
            <param name="desc"></param>
            <param name="tableName">The name of the table from where these type will originate</param>
        </member>
        <member name="M:Engage.Util.EngageType.#ctor(System.Int32,System.String)">
            <summary>
            Used to initialize an instance of the given <code>EngageType</code>
            </summary>
            <param name="id">Primary key of this object</param>
            <param name="desc">ShortDescription of this object</param>
        </member>
        <member name="M:Engage.Util.EngageType.#ctor(System.String,System.String,System.String)">
            <summary>
            Used to initialize an instance of the given <code>EngageType</code>
            This constructor is used for initializing values from Lookup by
            specifying a LookupType
            </summary>
            <param name="desc">The desc.</param>
            <param name="tableName">Name of the table.</param>
            <param name="lookupType">Type of the lookup.</param>
        </member>
        <member name="T:Engage.Routing.RoutingManager">
            <summary>
            This class handles the processing of RoutingTransactions records. RunServiceEvents provides a way to run
            all Routing Event types or a specific type. Any unhandled exceptions are sent to alerts@engageemail.com
            for review.
            </summary>
        </member>
        <member name="T:Engage.Routing.RoutingTransactionDetail">
            <summary>
            This class represents a row in Engage_RoutingTransactionDetail with details about the transaction results.
            </summary>
        </member>
        <member name="T:Engage.Services.IMessageLogger">
            <summary>
            Summary description for IMessageLogger.
            </summary>
        </member>
        <member name="T:Engage.Services.IProgressBar">
            <summary>
            Summary description for IProgressBar.
            </summary>
        </member>
        <member name="T:Engage.Services.IProgressBarProvider">
            <summary>
            Summary description for IProgressBarProvider.
            </summary>
        </member>
        <member name="T:Engage.Services.IUIElementService">
            <summary>
            Enables interaction with the user interface of the development environment object that is hosting the designer.
            </summary>
        </member>
        <member name="T:Engage.Services.IUIService">
            <summary>
            Enables interaction with the user interface of the development environment object that is hosting the designer.
            </summary>
        </member>
        <member name="T:Engage.Services.IXmlProvider">
            <summary>
            Summary description for IXmlProvider.
            </summary>
        </member>
        <member name="T:Engage.Services.NullProgressBar">
            <summary>
            Summary description for DefaultProgressBar.
            </summary>
        </member>
        <member name="T:Engage.Services.ServiceHelper">
            <summary>
            A utility class to help with common service related activities.
            </summary>
        </member>
        <member name="T:Engage.Templating.Attribute">
            <summary>
            Represents a single attribute of a <see cref="T:Engage.Templating.Tag"/>.
            </summary>
        </member>
        <member name="M:Engage.Templating.Attribute.#ctor(Engage.Templating.Tag)">
            <summary>
            Initializes a new instance of the <b>Attribute</b> class
            with the specified <see cref="T:Engage.Templating.Tag"/> that the attribute belongs to.
            </summary>
            <param name="parent"><see cref="T:Engage.Templating.Tag"/> to which the newly created Attribute belongs to.</param>
        </member>
        <member name="M:Engage.Templating.Attribute.ItIsDataBound">
            <summary>
            Sets the <see cref="P:Engage.Templating.Attribute.DataBound"/> flag to true.
            </summary>
        </member>
        <member name="M:Engage.Templating.Attribute.ToString">
            <summary>
            Gets string representation of the attribute.
            </summary>
            <returns>Entire attribute text (<see cref="P:Engage.Templating.Attribute.Body"/>).</returns>
        </member>
        <member name="P:Engage.Templating.Attribute.Root">
            <summary>
            Gets the <see cref="T:Engage.Templating.Template"/> to which this attribute belongs.
            </summary>
            <value>
            The <see cref="T:Engage.Templating.Template"/> to which this attribute belongs.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Parent">
            <summary>
            Gets the <see cref="T:Engage.Templating.Tag"/> that the Atrribute belongs to.
            </summary>
            <value>
            The <see cref="T:Engage.Templating.Tag"/> that the Atrribute belongs to.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Body">
            <summary>
            Gets the entire body of the <b>Attribute</b>.
            </summary>
            <value>
            The entire body of the <b>Attribute</b>.
            For example, Body is <c>id="Label1"</c> for the attribute <c>id="Label1"</c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.BodyFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Attribute.Body"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing entire body of this tag (<see cref="P:Engage.Templating.Attribute.Body"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Key">
            <summary>
            Gets the key of the attribute.
            </summary>
            <value>
            The key of the attribute.
            For example, Key is <c>id</c> for the attribute <c>id="Label1"</c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.KeyFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Attribute.Key"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing key of this tag (<see cref="P:Engage.Templating.Attribute.Key"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Value">
            <summary>
            Gets the value of the attribute.
            </summary>
            <value>
            The value of the attribute.
            For example, Value is <c>Label1</c> for the attribute <c>id="Label1"</c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.ValueFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Attribute.Value"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing value of this tag (<see cref="P:Engage.Templating.Attribute.Value"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.DataBound">
            <summary>
            Gets value indicating whether the attribute is databound.
            </summary>
            <value>
            <b>true</b> if the attribute is databound; otherwise, <b>false</b>.
            For example, DataBound is <c>true</c> for the attribute <c>Text='&lt;% this.ReturnText() %>'</c>.
            </value>
        </member>
        <member name="T:Engage.Templating.AttributeList">
            <summary>
            Represents a list of attributes that can be accessed by key or index.
            </summary>
        </member>
        <member name="M:Engage.Templating.AttributeList.#ctor">
            <summary>
            Initializes a new instance of the <b>AttributeList</b> class.
            The list is initialy empty.
            </summary>
        </member>
        <member name="M:Engage.Templating.AttributeList.GetEnumerator">
            <summary>
            Provides support for the "foreach" style iteration over the lis of attributes in the <b>AttributeList</b>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Engage.Templating.AttributeList.Append(Engage.Templating.Attribute)">
            <summary>
            Appends specified <see cref="T:Engage.Templating.Attribute"/> at the end of the list.
            </summary>
            <param name="attribute">The <see cref="T:Engage.Templating.Attribute"/> to append.</param>
        </member>
        <member name="P:Engage.Templating.AttributeList.Item(System.String)">
            <summary>
            Gets the attribute with the specified key.
            </summary>
            <param name="attributeKey">The key of the attribute.</param>
            <value>
            The <see cref="T:Engage.Templating.Attribute"/> with the specified key.
            </value>
        </member>
        <member name="P:Engage.Templating.AttributeList.Item(System.Int32)">
            <summary>
            Gets the attribute with the specified index.
            </summary>
            <param name="index">The index of the attribute.</param>
            <value>
            The <see cref="T:Engage.Templating.Attribute"/> with the specified index.
            </value>
        </member>
        <member name="P:Engage.Templating.AttributeList.Count">
            <summary>
            Gets the number of attributes in the list.
            </summary>
            <value>
            The number of attributes.
            </value>
        </member>
        <member name="T:Engage.Templating.DocumentFragment">
            <summary>
            Represents fragment of <see cref="T:Engage.Templating.Template"/> defined by index and length
            in the parent document.
            </summary>
        </member>
        <member name="M:Engage.Templating.DocumentFragment.#ctor(Engage.Templating.Template)">
            <summary>
            Initializes a new instance of the <b>DocumentFragment</b> class
            with the specified <see cref="T:Engage.Templating.Template"/> that the fragment belongs to.
            </summary>
            <param name="root"><see cref="T:Engage.Templating.Template"/> to which the newly created fragment belongs to.</param>
        </member>
        <member name="M:Engage.Templating.DocumentFragment.Set(System.Int32,System.Int32)">
            <summary>
            Defines index and length of the fragment in the <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <param name="index">Index at which the fragment occurs in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.</param>
            <param name="length">Length of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>Index must be greater or equal to zero</para> 
            <para>Index cannot exceed document length</para> or
            <para>Length must be greater or equal to zero</para> or
            <para>Index plus length cannot exceed document length</para>
            </exception>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Root">
            <summary>
            Gets the <see cref="T:Engage.Templating.Template"/> to which this fragment belongs.
            </summary>
            <value>
            The <see cref="T:Engage.Templating.Template"/> to which this fragment belongs.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Index">
            <summary>
            Gets index of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            Index of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Length">
            <summary>
            Gets length of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            Length of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.LineNo">
            <summary>
            Gets the line number of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            The line number of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.ColumnNo">
            <summary>
            Gets the column number of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            The line column of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Text">
            <summary>
            Gets the text of the fragment.
            </summary>
            <value>
            The text of the fragment.
            </value>
            <exception cref="T:System.InvalidOperationException">Index and length not defined.</exception>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Defined">
            <summary>
            Gets value indicating whether the fragment is defined.
            </summary>
            <value>
            <b>true</b> if the fragment is defined; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Engage.Templating.EngageTag">
            <summary>
            Represents a single Engage tag in a template document.
            </summary>
        </member>
        <member name="T:Engage.Templating.Tag">
            <summary>
            Represents a single tag in the ASPX document.
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.emptyTags">
            <summary>
            The list of tags which do not require closing tags
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.attributes">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Attributes"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.childTags">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.ChildTags"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.nameFragment">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.NameFragment"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.parent">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Parent"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.root">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Root"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.tagType">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.TagType"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.valueFragment">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.ValueFragment"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.error">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Error"/>
            </summary>
        </member>
        <member name="M:Engage.Templating.Tag.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Engage.Templating.Tag"/> class.
            </summary>
        </member>
        <member name="M:Engage.Templating.Tag.#ctor(Engage.Templating.Tag,Engage.Templating.TagType)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Templating.Tag"/> class
            with the specified parent and type.
            </summary>
            <param name="parent">Parent of the created tag.</param>
            <param name="type">Type of the created tag.</param>
        </member>
        <member name="M:Engage.Templating.Tag.HasAttribute(System.String)">
            <summary>
            Determines whether this tag has an attribute with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>
            <c>true</c> if this tag has an attribute with the specified <paramref name="name"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Templating.Tag.GetAttributeValue(System.String)">
            <summary>
            Gets the value of the attribute on this tag with the given <paramref name="name"/>.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The value of the attribute with the given <paramref name="name"/>, or <c>null</c> if an attribute with that name does not exist on this tag</returns>
        </member>
        <member name="M:Engage.Templating.Tag.ToString">
            <summary>
            Gets string representation of the tag.
            </summary>
            <returns>Entire tag text (<see cref="P:Engage.Templating.Tag.Value"/>).</returns>
        </member>
        <member name="M:Engage.Templating.Tag.SetError(Engage.Templating.TagError)">
            <summary>
            Sets error to the current tag.
            </summary>
            <param name="tagError">Error to set.</param>
        </member>
        <member name="P:Engage.Templating.Tag.Root">
            <summary>
            Gets the <see cref="T:Engage.Templating.Template"/> to which this tag belongs.
            </summary>
            <value>The <see cref="T:Engage.Templating.Template"/> to which this tag belongs.</value>
        </member>
        <member name="P:Engage.Templating.Tag.Parent">
            <summary>
            Gets the parent of this tag.
            </summary>
            <value>
            The <b>Tag</b> that is the parent of the current tag.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Prefix">
            <summary>
            Gets the namespace prefix of this tag.
            </summary>
            <value>
            The namespace prefix of this tag.
            For example, Prefix is <c>asp</c> for the tag <c>&lt;asp:label></c>.
            If there is no prefix, this property returns String.Empty.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.LocalName">
            <summary>
            Gets local name of the tag.
            </summary>
            <value>
            The name of the tag with the prefix removed.
            For example, LocalName is <c>label</c> for the tag <c>&lt;asp:label></c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Name">
            <summary>
            Gets the qualified name of the tag.
            </summary>
            <value>
            The qualified name of the tag.
            For example, Name is <c>asp:label</c> for the tag <c>&lt;asp:label></c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.NameFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Tag.Name"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing name of this tag (<see cref="P:Engage.Templating.Tag.Name"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Value">
            <summary>
            Gets the entire text of this tag.
            </summary>
            <value>
            Entire text of this tag.
            For example, Value is <c>&lt;asp:label id="Label1"></c> for the tag <c>&lt;asp:label id="Label1"></c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.ValueFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Tag.Value"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing entire text of this tag (<see cref="P:Engage.Templating.Tag.Value"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Attributes">
            <summary>
            Gets an <see cref="T:Engage.Templating.AttributeList"/> containing the attributes of this tag.
            </summary>
            <value>
            An <see cref="T:Engage.Templating.AttributeList"/> containing the attributes of the tag.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.ChildTags">
            <summary>
            Gets all the child tags of the tag.
            </summary>
            <value>
            An <see cref="T:Engage.Templating.TagList"/> that contains all the child tags of the tag.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.HasChildTags">
            <summary>
            Gets a value indicating whether this tag has any child tags.
            </summary>
            <value>
            <b>true</b> if the tag has child tags; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.FirstChild">
            <summary>
            Gets the first child of the tag.
            </summary>
            <value>
            The first child of the tag.
            If there is no such tag, a null reference is returned.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.LastChild">
            <summary>
            Gets the last child of the tag.
            </summary>
            <value>
            The last child of the tag.
            If there is no such tag, a null reference is returned.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.TagType">
            <summary>
            Gets the type of the current tag.
            </summary>
            <value>
            One of the <see cref="P:Engage.Templating.Tag.TagType"/> values.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Error">
            <summary>
            Gets the error of the current tag.
            </summary>
            <value>
            One of the <see cref="T:Engage.Templating.TagError"/> values.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.RequiresClosingTag">
            <summary>
            Gets a value indicating whether the tag requires to be closed with a close tag.
            </summary>
            <value>
            <b>true</b> if the tag requires to be closed; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Engage.Templating.TagError">
            <summary>
            Specifies error of <see cref="T:Engage.Templating.Tag"/>.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagError.None">
            <summary>
            Specified that there is no error.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagError.UnclosedOpenTag">
            <summary>
            The tag is not closed with a closing tag.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagError.UnopenedCloseTag">
            <summary>
            Close tag occurs without open tag.
            </summary>
        </member>
        <member name="T:Engage.Templating.TagList">
            <summary>
            Represents a list of tags that can be accessed by name or index.
            </summary>
        </member>
        <member name="M:Engage.Templating.TagList.#ctor">
            <summary>
            Initializes a new instance of the <b>TagList</b> class.
            The list is initialy empty.
            </summary>
        </member>
        <member name="M:Engage.Templating.TagList.GetEnumerator">
            <summary>
            Provides support for the "foreach" style iteration over the list of tags in the <b>TagList</b>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Engage.Templating.TagList.Append(Engage.Templating.Tag)">
            <summary>
            Appends specified <see cref="T:Engage.Templating.Tag"/> at the end of the list.
            </summary>
            <param name="tag">The <see cref="T:Engage.Templating.Tag"/> to append.</param>
        </member>
        <member name="P:Engage.Templating.TagList.Item(System.String)">
            <summary>
            Gets the first tag with the specified qualified <see cref="P:Engage.Templating.Tag.Name"/>.
            </summary>
            <param name="name">The qualified name of the tag to retrieve.</param>
            <value>The first <see cref="T:Engage.Templating.Tag"/> that matches the specified name.</value>
        </member>
        <member name="P:Engage.Templating.TagList.Item(System.Int32)">
            <summary>
            Gets the tag with the specified index.
            </summary>
            <param name="index">The index of the tag.</param>
            <value>
            The <see cref="T:Engage.Templating.Tag"/> with the specified index.
            </value>
        </member>
        <member name="P:Engage.Templating.TagList.FirstTag">
            <summary>
            Gets the first <see cref="T:Engage.Templating.Tag"/> in the list.
            </summary>
            <value>
            The first <see cref="T:Engage.Templating.Tag"/> in the list.
            </value>
        </member>
        <member name="P:Engage.Templating.TagList.LastTag">
            <summary>
            Gets the last <see cref="T:Engage.Templating.Tag"/> in the list.
            </summary>
            <value>
            The last <see cref="T:Engage.Templating.Tag"/> in the list.
            </value>
        </member>
        <member name="P:Engage.Templating.TagList.Count">
            <summary>
            Gets the number of tags in the list.
            </summary>
            <value>
            The number of tags.
            </value>
        </member>
        <member name="T:Engage.Templating.TagType">
            <summary>
            Specifies the type of <see cref="T:Engage.Templating.Tag"/>.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Root">
            <summary>
            A <see cref="T:Engage.Templating.Template"/> object that, as the root of the document tree,
            provides access to the entire Asp document. 
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Open">
            <summary>
            Open tag.
            <para>
            Example: &lt;asp:label id="Label1">
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Close">
            <summary>
            Close tag.
            <para>
            Example: &lt;/asp:label>
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Text">
            <summary>
            Text tag.
            <para>
            Example: &lt;title>TEXT&lt;/title> - the TEXT will occur as a Text tag
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Directive">
            <summary>
            Directive tag.
            <para>
            Example: &lt;%@ Page language= "c#" %>
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Code">
            <summary>
            Code tag.
            <para>
            Example: &lt;% this.DoSomething() %>
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Comment">
            <summary>
            Comment tag.
            <para>
            Example: &lt;!-- COMMENTED --> or &lt;%-- COMMENTED --%>
            </para>
            </summary>
        </member>
        <member name="T:Engage.Templating.Template">
            <summary>
            Represents an template document.
            </summary>
        </member>
        <member name="M:Engage.Templating.Template.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Engage.Templating.Template"/> class.
            </summary>
        </member>
        <member name="M:Engage.Templating.Template.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Templating.Template"/> class
            with the Aspx document content.
            </summary>
            <param name="docName">Name of the doc.</param>
            <param name="template">The Aspx document content that will be represented by the created <see cref="T:Engage.Templating.Template"/> object.</param>
        </member>
        <member name="P:Engage.Templating.Template.Root">
            <summary>
            Gets <see cref="T:Engage.Templating.Template"/> to which this tag belongs.
            </summary>
            <value>
            This property always returns this reference
            as the <b>Template Document</b> is always a root.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Parent">
            <summary>
            Gets the parent of this tag.
            </summary>
            <value>
            This property always returns a null reference
            as the <b>Document</b> is always a root.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Prefix">
            <summary>
            Gets the namespace prefix of this tag.
            </summary>
            <value>
            This property always returns an empty string (String.Empty)
            as the <b>Document</b> does not have a Prefix.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.LocalName">
            <summary>
            Gets the entire text of the ASP document.
            </summary>
            <value>
            The entire text of the ASP document.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Name">
            <summary>
            Gets the entire text of the ASP document.
            </summary>
            <value>
            The entire text of the ASP document.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.NameFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Template.Name"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing name of this tag (<see cref="P:Engage.Templating.Template.Name"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Value">
            <summary>
            Gets entire text of the ASP document.
            </summary>
            <value>
            Entire text of this document.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.ValueFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Template.Value"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing value of this tag (<see cref="P:Engage.Templating.Template.Value"/>).
            </value>
        </member>
        <member name="T:Engage.UserStorage">
            <summary>
            Summary description for UserStorage.
            </summary>
        </member>
        <member name="T:Engage.ASPNetDebugAssert">
            <summary>
            Will break on failed assert statements in ASP.NET applications.
            </summary>
            <remarks>
            You need to set up a boolean switch in your web.config named "BreakOnAssert" to true in order to enable this.
            Then wire up this class as a listener.
            from http://www.c-sharpcorner.com/UploadFile/johnconwell/DebugAssertInASPDotNet11262005013820AM/DebugAssertInASPDotNet.aspx
            </remarks>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.BreakInCode">
            <summary>
            Causes the debugger to break debugging.
            </summary>
        </member>
        <member name="T:Engage.Controls.ValidationSummary">
            <summary>
            An altered <see cref="T:System.Web.UI.WebControls.ValidationSummary"/> that renders within a structure like the the ModuleMessage control with an Error ModuleMessageType.
            </summary>
        </member>
        <member name="M:Engage.Controls.ValidationSummary.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The output stream that renders HTML content to the client.</param>
        </member>
        <member name="M:Engage.Controls.ValidationSummary.IsPageInError">
            <summary>
            Determines whether the page that this validation summary is on is in error.  Use this to determine whether to display markup or not.
            </summary>
            <remarks>
            We need to use this method because we can't call Page.IsValid until the page has been validated, which it may not have been.
            If we validate manually, it may throw validation errors before the user submits the page.
            </remarks>
            <returns>
            	<c>true</c> if this control's page in error; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Engage.Affiliations.AffiliationNotAllowedException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Affiliations.AffiliationTypeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.EngageSession">
            <summary>
            This class is a concrete implementation of the EngageSessionBase class.
            </summary>
        </member>
        <member name="T:Engage.Util.EngageSessionBase">
            <summary>
            This abstract class provides a set of methods to manage the static
            <CODE>GlobalSession</CODE>
             object provided by the subclasses;
            Some implementation is provided, the others must be implemented by the
            subclasses. Mainly be because the 
            <CODE>GlobalSession</CODE>
             object
            is a Singleton and must be provided by the subclasses in order to have
            multiple instances.
            Also, synchronization must be implemented by the subclass, on it's
            Class object
            @author Mark Gorla - Emerging Technologies Group
            @version $Revision: 9 $
            </summary>
        </member>
        <member name="T:Engage.Attributes.AttributeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.BinaryAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.DefaultEntityAttribute">
            <summary>
            Summary description for DefaultEntityAttribute.
            </summary>
        </member>
        <member name="M:Engage.Attributes.BinaryAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.BinaryAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type ID.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Util.ICommand">
            <summary>
            Summary description for ICommand.
            </summary>
        </member>
        <member name="T:Engage.Attributes.DateAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.DateAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.DateAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.DateAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Util.DateTimeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Util.DateTimeAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="required"></param>
            <param name="objectTypeID"></param>
        </member>
        <member name="M:Engage.Util.DateTimeAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Util.DefinitionRequirement">
            <summary>
            Summary description for EngageAffiliationType.
            </summary>
        </member>
        <member name="T:Engage.Util.DeleteObjectCommand">
            <summary>
            Summary description for DeleteObjectCommand.
            </summary>
        </member>
        <member name="T:Engage.Attributes.EmailAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.EmailAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.EmailAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.EmailAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Affiliations.EngageAffiliationType">
            <summary>
            Summary description for EngageAffiliationType.
            </summary>
        </member>
        <member name="T:Engage.Attributes.Attribute">
            <summary>
            Summary description for Attribute.
            </summary>
        </member>
        <member name="T:Engage.Attributes.AttributeType">
            <summary>
            Summary description for AttributeType.
            </summary>
        </member>
        <member name="T:Engage.Lookups.BinaryType">
            <summary>
            Summary description for LookupType.
            </summary>
        </member>
        <member name="T:Engage.GenericComparer`1">
            <summary>
            A comparer that takes a string and sorts by a field of that name on the compared objects.
            If the field is not <see cref="T:System.IComparable"/>, but is <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
            it will attempt to sort by the first value in the list (assuming that the list isn't empty
             and the type of enumerated type is <see cref="T:System.IComparable"/>.
            from http://www.gridviewguy.com/ArticleDetails.aspx?articleID=203
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="F:Engage.GenericComparer`1.sortExpression">
            <summary>
            Name of the field by which the items are to be sorted
            </summary>
        </member>
        <member name="F:Engage.GenericComparer`1.sortDirection">
            <summary>
            Backing field for <see cref="P:Engage.GenericComparer`1.SortDirection"/>
            </summary>
        </member>
        <member name="M:Engage.GenericComparer`1.#ctor(System.String,System.Web.UI.WebControls.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.GenericComparer`1"/> class.
            </summary>
            <param name="sortExpression">The name of the field by which the items are to be sorted.</param>
            <param name="sortDirection">The direction in which to sort items.</param>
        </member>
        <member name="M:Engage.GenericComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="P:Engage.GenericComparer`1.SortDirection">
            <summary>
            Gets or sets the direction in which to sort items.
            </summary>
            <value>The direction in which to sort items.</value>
        </member>
        <member name="T:Engage.Attribute">
            <summary>
            This class represents an attribute.  The <see cref="T:Engage.AttributeDefinition"/> is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:Engage.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="M:Engage.AttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.AttributeCollection"/> class.
            </summary>
        </member>
        <member name="M:Engage.AttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Engage.AttributeCollection.System#Collections#Generic#IEnumerable{Engage#AttributeDefinition}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Engage.AttributeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Engage.AttributeDefinition"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:Engage.AttributeDefinition.SetType(System.String)">
            <exception cref="T:Engage.SgmlException">Attribute type is not supported</exception>
        </member>
        <member name="M:Engage.AttributeDefinition.SetPresence(System.String)">
            <exception cref="T:Engage.SgmlException">Attrivute value is not supported</exception>
        </member>
        <member name="T:Engage.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="M:Engage.ContentModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ContentModel"/> class.
            </summary>
        </member>
        <member name="M:Engage.ContentModel.SetDeclaredContent(System.String)">
            <exception cref="T:Engage.SgmlException">Declared content type is not supported</exception>
        </member>
        <member name="M:Engage.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Engage.Entity.ScanToken(System.Text.StringBuilder,System.String,System.Boolean)">
            <exception cref="T:Engage.SgmlException">Invalid name character</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String,System.Char)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String,System.Int32)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String,System.String)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Engage.Group.AddConnector(System.Char)">
            <exception cref="T:Engage.SgmlException">Missing token before connector</exception>
            <exception cref="T:Engage.SgmlException">Connector is inconsistent with group</exception>
        </member>
        <member name="T:Engage.HtmlConverter">
            <summary>
            from http://weblogs.asp.net/jezell/archive/2003/10/24/33376.aspx
            </summary>
        </member>
        <member name="F:Engage.HtmlConverter.XhtmlNamespace">
            <summary>
            The namespace URL for XHTML
            </summary>
        </member>
        <member name="F:Engage.HtmlConverter.XhtmlSchema">
            <summary>
            The XHTML schema, used to validate the document
            </summary>
        </member>
        <member name="M:Engage.HtmlConverter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Engage.HtmlConverter"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Could not load XHTML schema from assembly</exception>
        </member>
        <member name="M:Engage.HtmlConverter.CreateValidXmlDocument(System.String)">
            <summary>
            Adds a root &lt;html&gt; element to the given <paramref name="html"/> string, if it doesn't already have it
            </summary>
            <param name="html">The HTML from which to create a valid document.</param>
            <returns>An valid <see cref="T:System.Xml.XPath.IXPathNavigable"/> instance of the given <paramref name="html"/></returns>
        </member>
        <member name="M:Engage.HtmlConverter.ValidateAndCloseTags(System.String)">
            <summary>
            Validates the given <paramref name="html"/> string, ensuring that all opened tags are closed.
            </summary>
            <param name="html">The HTML to validate and close.</param>
            <returns><paramref name="html"/> with any invalidities removed</returns>
        </member>
        <member name="M:Engage.HtmlConverter.ToXhtml(System.String)">
            <summary>
            Converts the given <paramref name="html"/> string into a valid XHTML document.
            </summary>
            <param name="html">The HTML to convert into a navigable document.</param>
            <returns>The given <paramref name="html"/> as an XHTML document</returns>
        </member>
        <member name="M:Engage.HtmlConverter.IsValidAttribute(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Determines whether the given <paramref name="attribute"/> is valid for the given <paramref name="parentElement"/>.
            </summary>
            <param name="parentElement">The parent element of <paramref name="attribute"/>.</param>
            <param name="attribute">The attribute to validate.</param>
            <returns>
            <c>true</c> if the given <paramref name="attribute"/> is valid for the given <paramref name="parentElement"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.HtmlConverter.IsValidElement(System.Xml.XmlNode)">
            <summary>
            Determines whether the given element is valid for XHTML documents.
            </summary>
            <param name="element">The element to validate.</param>
            <returns>
            <c>true</c> if the given element is valid for XHTML documents; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.HtmlConverter.ProcessNode(System.Xml.XmlNode)">
            <summary>
            Walks over the node and removes all invalid elements and attributes.
            </summary>
            <param name="parent">The node to process.</param>
        </member>
        <member name="T:Engage.HtmlStream">
            <summary>
            This class decodes an HTML/XML stream correctly.
            </summary>
        </member>
        <member name="T:Engage.HWStack">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="P:Engage.HWStack.Item(System.Int32)">
            <summary>
            Gets or sets the item at the requested <paramref name="index"/> or <c>null</c> if <paramref name="index"/> is out of bounds
            </summary>
            <value>The item at the requested <paramref name="index"/> or <c>null</c> if <paramref name="index"/> is out of bounds</value>
        </member>
        <member name="T:Engage.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:Engage.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="M:Engage.SgmlDtd.Parse(System.Uri,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlNameTable)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.SgmlDtd.Parse(System.Uri,System.String,System.IO.TextReader,System.String,System.String,System.Xml.XmlNameTable)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.SgmlDtd.ParseIncludeSection">
            <exception cref="T:System.NotImplementedException">Include Section</exception>
        </member>
        <member name="M:Engage.SgmlDtd.ScanName(System.String)">
            <exception cref="T:System.NotSupportedException">External parameter entity resolution</exception>
        </member>
        <member name="M:Engage.SgmlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.SgmlException"/> class.
            </summary>
        </member>
        <member name="T:Engage.SgmlReader">
            <summary>
            SgmlReader is an <see cref="T:System.Xml.XmlReader"/> API over any SGML document (including built in 
            support for HTML).  
            </summary>
            <remarks>
            An XmlReader implementation for loading SGML (including HTML) converting it
            to well formed XML, by adding missing quotes, empty attribute values, ignoring
            duplicate attributes, case folding on tag names, adding missing closing tags
            based on SGML DTD information, and so on.
            </remarks>
        </member>
        <member name="F:Engage.SgmlReader.attributePosition">
            <summary>
            which attribute are we positioned on in the collection.
            </summary>
        </member>
        <member name="F:Engage.SgmlReader.node">
            <summary>
            current node (except for attributes)
            </summary>
        </member>
        <member name="M:Engage.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="M:Engage.SgmlReader.GetAttribute(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>i</c> is out of range.</exception>
        </member>
        <member name="M:Engage.SgmlReader.MoveToAttribute(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>i</c> is out of range.</exception>
        </member>
        <member name="M:Engage.SgmlReader.ResolveEntity">
            <exception cref="T:System.InvalidOperationException">Not on an entity reference.</exception>
        </member>
        <member name="M:Engage.SgmlReader.ReadAttributeValue">
            <exception cref="T:System.InvalidOperationException">Not on an attribute.</exception>
        </member>
        <member name="M:Engage.SgmlReader.OpenInput">
            <exception cref="T:System.InvalidOperationException">You must specify input either via Href or InputStream properties</exception>
        </member>
        <member name="P:Engage.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.StripDocType">
            <summary>
            Gets or sets a value indicating whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.ErrorLogFile">
            <summary>
            DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="T:Engage.State">
            <summary>
            This <c>enum</c> is used to track the current state of the <see cref="T:Engage.SgmlReader"/>
            </summary>
        </member>
        <member name="M:Engage.Ucs4DecoderBigEngian.GetFullChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <exception cref="T:Engage.SgmlException">Invalid character in encoding</exception>
        </member>
        <member name="M:Engage.Ucs4DecoderLittleEndian.GetFullChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <exception cref="T:Engage.SgmlException">Invalid character in encoding</exception>
        </member>
        <member name="T:Engage.Logging.EventNotifier">
            <summary>
            Summary description for EventNotifier.
            </summary>
        </member>
        <member name="T:Engage.Logging.EventNotificationSectionHandler">
            <summary>
            Summary description for EventNotificationSectionHandler.
            </summary>
        </member>
        <member name="T:Engage.Logging.FileNotifier">
            <summary>
            Summary description for FileNotifier.
            </summary>
        </member>
        <member name="T:Engage.Logging.FowardOnlyEventNotifier">
            <summary>
            Summary description for FowardOnlyEventNotifier.
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.ItemPagingState">
            <summary>
            Represents the state of the paging of a list of items
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ItemPagingState.currentPage">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ItemPagingState.CurrentPage"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ItemPagingState.totalItems">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ItemPagingState.TotalItems"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ItemPagingState.itemsPerPage">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ItemPagingState.ItemsPerPage"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> class.
            </summary>
            <param name="currentPage">The current page (1-based).</param>
            <param name="totalItems">The total number of items.</param>
            <param name="itemsPerPage">The number of items per page.</param>
            <exception cref="T:System.ArgumentException"><paramref name="totalItems"/> must be a non-negative number</exception>
            <exception cref="T:System.ArgumentException"><paramref name="itemsPerPage"/> must be a positive number</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.Next">
            <summary>
            Creates a <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> for the next page, otherwise this page.
            </summary>
            <returns>A <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> set to the next page, if there is one, otherwise this page.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.Previous">
            <summary>
            Creates a <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> for the previous page, otherwise this page.
            </summary>
            <returns>A <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> set to the previous page, if there is one, otherwise this page.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.SetPage(System.Int32)">
            <summary>
            Creates a <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> for the given page.
            </summary>
            <param name="currentPage">The page to be set as current for the new instance.</param>
            <returns>A <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> set to the given page</returns>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.CurrentPage">
            <summary>
            Gets the current page (1-based).
            </summary>
            <value>The current page.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.TotalItems">
            <summary>
            Gets the total number of items.
            </summary>
            <value>The total number of items.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.ItemsPerPage">
            <summary>
            Gets the number of items per page.
            </summary>
            <value>The number of items per page.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.TotalPages">
            <summary>
            Gets the total number of pages.
            </summary>
            <value>The total number of pages.</value>
        </member>
        <member name="T:Engage.Pair`2">
            <summary>
            A generic structure holding two related values.
            </summary>
            <typeparam name="TFirst">The type of the first value.</typeparam>
            <typeparam name="TSecond">The type of the second value.</typeparam>
        </member>
        <member name="F:Engage.Pair`2.first">
            <summary>
            Backing field for <see cref="P:Engage.Pair`2.First"/>
            </summary>
        </member>
        <member name="F:Engage.Pair`2.second">
            <summary>
            Backing field for <see cref="P:Engage.Pair`2.Second"/>
            </summary>
        </member>
        <member name="M:Engage.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Pair`2"/> struct.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Engage.Pair`2.op_Equality(Engage.Pair{`0,`1},Engage.Pair{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="thisPair">This pair.</param>
            <param name="otherPair">The other pair.</param>
            <returns><c>true</c> if <paramref name="thisPair"/> == <paramref name="otherPair"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Pair`2.op_Inequality(Engage.Pair{`0,`1},Engage.Pair{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="thisPair">This pair.</param>
            <param name="otherPair">The other pair.</param>
            <returns><c>true</c> if <paramref name="thisPair"/> != <paramref name="otherPair"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Pair`2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Engage.Pair`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Engage.Pair`2.First">
            <summary>
            Gets or sets the first value.
            </summary>
            <value>The first value.</value>
        </member>
        <member name="P:Engage.Pair`2.Second">
            <summary>
            Gets or sets the second value.
            </summary>
            <value>The second value.</value>
        </member>
        <member name="T:Engage.Util.RuntimeClass">
            <summary>
            Summary description for RuntimeClass.
            </summary>
        </member>
        <member name="T:Engage.Util.ClassType">
            <summary>
            Summary description for ClassType.
            </summary>
        </member>
        <member name="T:Engage.Lookups.LookupType">
            <summary>
            Summary description for LookupType.
            </summary>
        </member>
        <member name="T:Engage.Entities.EntityType">
            <summary>
            Summary description for EntityType.
            </summary>
        </member>
        <member name="T:Engage.Util.ExportCSVCommand">
            <summary>
            Summary description for ExportCSVCommand.
            </summary>
        </member>
        <member name="T:Engage.Attributes.FileAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.FileAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.FileAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type ID.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Attributes.HyperLinkAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.HyperLinkAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.HyperLinkAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.HyperLinkAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Attributes.ImageAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.ImageAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.ImageAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type ID.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Lookups.InvalidLookupValueException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.IResult">
            <summary>
            Represent the individual results that may return from a call to Run on a given Job.
            </summary>
        </member>
        <member name="T:Engage.Util.ItemNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.LargeTextAttribute">
            <summary>
            Use this class for storing text larger than the 850 character limit on EntityAttribute
            This data is not searchable nor versioned using the normal mechanisms
            </summary>
        </member>
        <member name="M:Engage.Attributes.LargeTextAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.LargeTextAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Util.ListViewTextSort">
            <summary>
            Provides text sorting (case sensitive)
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewTextSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewTextSort.Compare(System.Object,System.Object)">
            <summary>
            Implementation of IComparer.Compare
            </summary>
            <param name="lhs">First object to compare</param>
            <param name="rhs">Second object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="M:Engage.Util.ListViewTextSort.OnCompare(System.String,System.String)">
            <summary>
            Overridden to do type-specific comparision.
            </summary>
            <param name="lhs">First object to compare</param>
            <param name="rhs">Second object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="T:Engage.Util.ListViewTextCaseInsensitiveSort">
            <summary>
            Provides text sorting (case insensitive)
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewTextCaseInsensitiveSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewTextCaseInsensitiveSort.OnCompare(System.String,System.String)">
            <summary>
            Case-insensitive compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewDateSort">
            <summary>
            Provides date sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewDateSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewDateSort.OnCompare(System.String,System.String)">
            <summary>
            Date compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewIntegerSort">
            <summary>
            Provides integer sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewIntegerSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewIntegerSort.OnCompare(System.String,System.String)">
            <summary>
            Integer compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewFloatSort">
            <summary>
            Provides floating-point sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewFloatSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewFloatSort.OnCompare(System.String,System.String)">
            <summary>
            Floating-point compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewSortManager">
            <summary>
            Provides sorting of ListView columns 
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewSortManager.#ctor(System.Windows.Forms.ListView,System.Type[])">
            <summary>
            
            </summary>
            <param name="list">ListView that this manager will provide sorting to</param>
            <param name="comparers">Array of Types of comparers (One for each column)</param>
        </member>
        <member name="M:Engage.Util.ListViewSortManager.Sort(System.Int32)">
            <summary>
            Sorts the columns
            </summary>
            <param name="c">Column to be sorted</param>
        </member>
        <member name="T:Engage.Util.ListViewCurrencySort">
            <summary>
            Provides currency sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewCurrencySort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewCurrencySort.OnCompare(System.String,System.String)">
            <summary>
            Currency compare
            </summary>
        </member>
        <member name="T:Engage.Attributes.LookupAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.LookupAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.GetLookupItems">
            <summary>
            Returns all the valid values, plus an empty value, for
            LookupValues for this LookupAttribute's LookupTypeID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.GetLookupTypes">
            <summary>
            Returns all the Lookup types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.GetLookupValues(System.Int32)">
            <summary>
            Returns all the LookupValues for the given lookupTypeID
            </summary>
            <param name="lookupTypeID">The lookup type ID.</param>
            <returns></returns>
        </member>
        <member name="T:Engage.Affiliations.MissingAffiliationException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.MsConnectionString">
            <summary>
            Summary description for ConnectionString.
            
            user id=sa;password=secret;database=coremktg;data source=etg05;
            </summary>
        </member>
        <member name="T:Engage.Util.NullEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.NullEntityAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.NumericAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.NumericAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.NumericAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.NumericAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Affiliations.ParentTypeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.PhoneNumberAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.PhoneNumberAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.PhoneNumberAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.PhoneNumberAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Util.QueryStringBuilder">
            <summary>
            Summary description for QueryStringBuilder.
            </summary>
        </member>
        <member name="T:Engage.Attributes.RequiredAttributeMissingException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.SaveMode">
            <summary>
            Summary description for SaveMode.
            </summary>
        </member>
        <member name="T:Engage.Util.SortableList">
            <summary>
            The SortableList allows to maintain a list sorted as long as needed.
            If no IComparer interface has been provided at construction, then the list expects the Objects to implement IComparer.
            If the list is not sorted it behaves like an ordinary list.
            When sorted, the list's "Add" method will put new objects at the right place.
            As well the "Contains" and "IndexOf" methods will perform a binary search.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor">
            <summary>
            Default constructor.
            Since no IComparer is provided here, added objects must implement the IComparer interface.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor(System.Int32)">
            <summary>
            Constructor.
            Since no IComparer is provided, added objects must implement the IComparer interface.
            </summary>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor(System.Collections.IComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="M:Engage.Util.SortableList.Add(System.Object)">
            <summary>
            IList implementation.
            If the <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be added at the end of the list.
            </summary>
            <param name="O">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.Contains(System.Object)">
            <summary>
            IList implementation.
            Search for a specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:Engage.Util.SortableList.Equals(System.Object)">entity.Equals</see> implementation is used.
            </summary>
            <param name="O">The object to look for</param>
            <returns>true if the object is in the list, otherwise false.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object)">
            <summary>
            IList implementation.
            Returns the index of the specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:Engage.Util.SortableList.Equals(System.Object)">entity.Equals</see> implementation of objects is used.
            </summary>
            <param name="O">The object to locate.</param>
            <returns>
            If the object has been found, a positive integer corresponding to its position.
            If the objects has not been found, a negative integer which is the bitwise complement of the index of the next element.
            </returns>
        </member>
        <member name="M:Engage.Util.SortableList.Clear">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.Insert(System.Int32,System.Object)">
            <summary>
            IList implementation.
            Inserts an objects at a specified index.
            Cannot be used if the list has its KeepSorted property set to true.
            </summary>
            <param name="Index">The index before which the object must be added.</param>
            <param name="O">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:Engage.Util.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.Remove(System.Object)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Value">The object whose value must be removed if found in the list.</param>
        </member>
        <member name="M:Engage.Util.SortableList.RemoveAt(System.Int32)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Index">Index of object to remove.</param>
        </member>
        <member name="M:Engage.Util.SortableList.CopyTo(System.Array,System.Int32)">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Engage.Util.SortableList.GetEnumerator">
            <summary>
            IList.IEnumerable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Enumerator on the list.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.Clone">
            <summary>
            ICloneable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object,System.Int32)">
            <summary>
            Idem IndexOf(object), but starting at a specified position in the list
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object,Engage.Util.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object,System.Int32,Engage.Util.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a start index and a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.SortableList.ToString">
            <summary>
            entity.ToString() override.
            Build a string to represent the list.
            </summary>
            <returns>The string refecting the list.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.Equals(System.Object)">
            <summary>
            entity.Equals() override.
            </summary>
            <returns>true if object is equal to this, otherwise false.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.GetHashCode">
            <summary>
            entity.GetHashCode() override.
            </summary>
            <returns>Hash code for this.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.Sort">
            <summary>
            Sorts the elements in the list using <see cref="M:System.Collections.ArrayList.Sort">ArrayList.Sort</see>.
            Does nothing if the list is already sorted.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.AddRange(System.Collections.ICollection)">
            <summary>
            If the <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be appended to the list.
            </summary>
            <param name="C">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts a collection of objects at a specified index.
            Should not be used if the list is the KeepSorted property is set to true.
            </summary>
            <param name="Index">The index before which the objects must be added.</param>
            <param name="C">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use objects's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:Engage.Util.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.LimitNbOccurrences(System.Object,System.Int32)">
            <summary>
            Limits the number of occurrences of a specified value.
            Same values are equals according to the Equals() method of objects in the list.
            The first occurrences encountered are kept.
            </summary>
            <param name="Value">Value whose occurrences number must be limited.</param>
            <param name="NbValuesToKeep">Number of occurrences to keep</param>
        </member>
        <member name="M:Engage.Util.SortableList.RemoveDuplicates">
            <summary>
            Removes all duplicates in the list.
            Each value encountered will have only one representant.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOfMin">
            <summary>
            Returns the object of the list whose value is minimum
            </summary>
            <returns>The minimum object in the list</returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOfMax">
            <summary>
            Returns the object of the list whose value is maximum
            </summary>
            <returns>The maximum object in the list</returns>
        </member>
        <member name="P:Engage.Util.SortableList.IsSorted">
            <summary>
            'Get only' property that indicates if the list is sorted.
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.KeepSorted">
            <summary>
            Get : Indicates if the list must be kept sorted from now on.
            Set : Tells the list if it must stay sorted or not. Impossible to set to true if the list is not sorted.
            <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see>==true implies that <see cref="P:Engage.Util.SortableList.IsSorted">IsSorted</see>==true
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot be set to true if the list is not sorted yet.</exception>
        </member>
        <member name="P:Engage.Util.SortableList.AddDuplicates">
            <summary>
            If set to true, it will not be possible to add an object to the list if its value is already in the list.
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.Item(System.Int32)">
            <summary>
            IList implementation.
            Gets - or sets - object's value at a specified index.
            The set operation is impossible if the <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">[] operator cannot be used to set a value if KeepSorted property is set to true.</exception>
        </member>
        <member name="P:Engage.Util.SortableList.IsFixedSize">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.IsReadOnly">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.Count">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.IsSynchronized">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.SyncRoot">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.Capacity">
            <summary>
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="T:Engage.Util.SortableList.Equality">
            <summary>
            Defines an equality for two objects
            </summary>
        </member>
        <member name="T:Engage.Util.TextBoxTraceListener">
            <summary>
            Summary description for DebugTracer.
            </summary>
        </member>
        <member name="T:Engage.Attributes.TimeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.TimeAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.TimeAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.TimeAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.ThreadSafeDictionary`2">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> that is thread safe (uses a lock when altering the collection).
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="F:Engage.ThreadSafeDictionary`2.dictionary">
            <summary>
            The backing <see cref="T:System.Collections.Generic.Dictionary`2"/> which implements all of the common functionality of this <see cref="T:Engage.ThreadSafeDictionary`2"/>.
            </summary>
        </member>
        <member name="F:Engage.ThreadSafeDictionary`2.syncRoot">
            <summary>
            An <see cref="T:System.Object"/> to lock on when performing operations that aren't otherwise thread-safe
            </summary>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type. 
            </summary>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type. 
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Engage.ThreadSafeDictionary`2"/> can contain.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>. 
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>. 
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Engage.ThreadSafeDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default equality comparer for the key type. 
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Engage.ThreadSafeDictionary`2"/>.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>. 
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Engage.ThreadSafeDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key is not found.</exception>
        </member>
        <member name="T:Engage.Util.TimeCycle">
            <summary>
            This class represents a time period
            </summary>
        </member>
        <member name="M:Engage.Util.TimeCycle.#ctor">
            <summary>
            Creates a <code>TimeCycle</code> that is always active
            </summary>
        </member>
        <member name="M:Engage.Util.TimeCycle.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a <code>TimeCycle</code> that is active between the startHour and stopHour
            </summary>
            <param name="startHour">Hour that this <code>TimeCycle</code> becomes active (24 hour time)</param>
            <param name="stopHour">Hour that this <code>TimeCycle</code> becomes inactive (24 hour time)</param>
        </member>
        <member name="M:Engage.Util.TimeCycle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <code>TimeCycle</code> that is active between the startHour/startMinute and stopHour/stopMinute
            </summary>
            <param name="startHour">Hour that this <code>TimeCycle</code> becomes active (24 hour time)</param>
            <param name="startMinute">Minute that this <code>TimeCycle</code> becomes active for the startHour</param>
            <param name="stopHour">Hour that this <code>TimeCycle</code> becomes inactive (24 hour time)</param>
            <param name="stopMinute">Minute that this <code>TimeCycle</code> becomes inactive for the stopHour</param>
        </member>
        <member name="M:Engage.Util.TimeCycle.GetSleepTime">
            <summary>
            This method calculates the number of milliseconds to sleep if during an inactive
            period. If during an active period, 0 is returned.
            </summary>
            <returns>The number of milliseconds to sleep</returns>
        </member>
        <member name="M:Engage.Util.TimeCycle.GetActiveCycleStartTime">
            <summary>
            Returns a <code>string</code> representing the startTime of this <code>TimeCycle</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.TimeCycle.GetActiveCycleStopTime">
            <summary>
            Returns a <code>string</code> representing the stopTime of this <code>TimeCycle</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.TimeCycle.Update">
            <summary>
            Private method that gets the current time and based on the start and stop times adjusts
            the times to test if this <code>TimeCycle</code> is active.
            </summary>
        </member>
        <member name="M:Engage.Util.TimeCycle.ToString">
            <summary>
            Returns a <code>string</code> representation of the <code>TimeCycle</code> object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engage.Util.TimeCycle.Active">
            <summary>
            This method returns a <code>bool</code> to indicate if this <code>TimeCycle</code>
            is currently active.
            </summary>
        </member>
        <member name="P:Engage.Util.TimeCycle.SleepDayEnabled">
            <summary>
            Returns a <code>bool</code> indicating the the SleepDay function is enabled
            </summary>
        </member>
        <member name="P:Engage.Util.TimeCycle.SleepDay">
            <summary>
            Returns the <code>DayOfWeek Enum</code> that this <code>TimeCycle</code> sleeps, if enabled
            </summary>
        </member>
        <member name="T:Engage.TimeZoneInfo">
            <summary>
            Represents a time zone and provides access to all system time zones.
            </summary>
            <remarks>
            Author: Arman Ghazanchyan
            Created date: 09/04/2007
            Last updated: 09/17/2007
            From: http://www.codeproject.com/KB/vb/TimeZoneInfo.aspx
            </remarks>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="F:Engage.TimeZoneInfo.displayName">
            <summary>
            Backing field for <see cref="P:Engage.TimeZoneInfo.DisplayName"/>.
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.id">
            <summary>
            Backing field for <see cref="P:Engage.TimeZoneInfo.Id"/>.
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.tzi">
            <summary>
            Backing <see cref="T:Engage.TimeZoneInfo.TimeZoneInformation"/> for this instance.
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.TimeZoneInfo"/> class.
            </summary>
            <param name="standardName">A time zone standard name.</param>
        </member>
        <member name="M:Engage.TimeZoneInfo.#ctor">
            <summary>
            Prevents a default instance of the TimeZoneInfo class from being created.
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetTimeZones">
            <summary>
            Gets an array of all time zones on the system.
            </summary>
            <returns>An array of all time zones on the system.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.Sort(System.Collections.Generic.List{Engage.TimeZoneInfo})">
            <summary>
            Sorts the elements in a list(Of TimeZoneInfo) 
            object based on standard UTC offset or display name.
            </summary>
            <param name="timeZones">A time zone list to sort.</param>
        </member>
        <member name="M:Engage.TimeZoneInfo.Sort(Engage.TimeZoneInfo[])">
            <summary>
            Sorts the elements in an entire one-dimensional TimeZoneInfo 
            array based on standard UTC offset or display name.
            </summary>
            <param name="timeZones">A time zone array to sort.</param>
        </member>
        <member name="M:Engage.TimeZoneInfo.FromStandardName(System.String)">
            <summary>
            Gets a TimeZoneInfo.Object from standard name.
            </summary>
            <param name="standardName">A time zone standard name.</param>
            <returns>A TimeZoneInfo instance filled with the information about the time zone with the given name</returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.FromId(System.String)">
            <summary>
            Gets a TimeZoneInfo.Object from Id.
            </summary>
            <param name="id">A time zone id that corresponds
            to the windows registry time zone key.</param>
            <returns>A TimeZoneInfo instance filled with the information about the time zone with the Id</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.ArgumentException">Unknown time zone.</exception>
            <exception cref="T:System.ArgumentNullException"><c>id</c> is null.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetDaylightChanges(System.Int32)">
            <summary>
            Gets the daylight saving time for a particular year.
            </summary>
            <param name="year">The year to which the daylight
            saving time period applies.</param>
            <returns>The daylight saving time for a particular year</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.InvalidOperationException">Unknown time zone.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.IsDaylightSavingTime">
            <summary>
            Returns a value indicating whether this time
            zone is within a daylight saving time period.
            </summary>
            <returns>
            <c>true</c> if this time zone is within a daylight saving time period; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.Refresh">
            <summary>
            Refreshes the information of the time zone object.
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.ToString">
            <summary>
            Returns a System.String that represents the current TimeZoneInfo object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object
            is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare
            with the current System.Object.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.Equals(Engage.TimeZoneInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.Compare(Engage.TimeZoneInfo,Engage.TimeZoneInfo)">
            <summary>
            Compares two specified TimeZoneInfo.Objects
            based on standard UTC offset or display name.
            </summary>
            <param name="x">The first TimeZoneInfo.Object.</param>
            <param name="y">The second TimeZoneInfo.Object.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.CreateDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and returns a date and time object.
            </summary>
            <param name="year">The year of the date.</param>
            <param name="month">The month of the date.</param>
            <param name="day">The week day in the month.</param>
            <param name="dayOfWeek">The day of the week.</param>
            <param name="hour">The hour of the date.</param>
            <param name="minute">The minute of the date.</param>
            <param name="second">The seconds of the date.</param>
            <param name="milliseconds">The milliseconds of the date.</param>
            <returns>A date and time object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Day</c> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>DayOfWeek</c> is out of range.</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetStartDate(Engage.TimeZoneInfo.TimeZoneInformation,System.Int32)">
            <summary>
            Gets the starting daylight saving date and time for specified time zone.
            </summary>
            <param name="timeZoneInfo">The time fone info.</param>
            <param name="year">The year whose daylight saving time information is to be retrieved.</param>
            <returns>The starting daylight saving date and time for specified time zone</returns>
            <exception cref="T:System.ArgumentException">timeZoneInfo.DaylightDate.Month must not be 0</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetEndDate(Engage.TimeZoneInfo.TimeZoneInformation,System.Int32)">
            <summary>
            Gets the end date of the daylight saving time for specified time zone.
            </summary>
            <param name="timeZoneInfo">The time zone info.</param>
            <param name="year">The year whose daylight saving time information is to be retrieved.</param>
            <returns>The end date of the daylight saving time for specified time zone</returns>
            <exception cref="T:System.ArgumentException">timeZoneInfo.StandardDate.Month must not be 0</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.SetValues">
            <summary>
            Sets the time zone object's information.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.InvalidOperationException">Unknown time zone.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.SetValues(System.String)">
            <summary>
            Sets the time zone object's information.
            </summary>
            <param name="standardName">A time zone standard name.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.ArgumentException">Unknown time zone.</exception>
            <exception cref="T:System.ArgumentNullException"><c>StandardName</c> is null.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="P:Engage.TimeZoneInfo.CurrentTimeZone">
            <summary>
            Gets the current time zone for this computer system.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.DisplayName">
            <summary>
            Gets the display name of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.DaylightName">
            <summary>
            Gets the daylight saving name of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.StandardName">
            <summary>
            Gets the standard name of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.CurrentTime">
            <summary>
            Gets the current date and time of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.CurrentUtcOffset">
            <summary>
            Gets the current UTC (Coordinated Universal Time) offset of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.StandardUtcOffset">
            <summary>
            Gets the standard UTC (Coordinated Universal Time) offset of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.Id">
            <summary>
            Gets the id of the time zone.
            </summary>
        </member>
        <member name="T:Engage.TimeZoneInfo.SYSTEMTIME">
            <summary>
            A time structure
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Year">
            <summary>
            The year of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Month">
            <summary>
            The month of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.DayOfWeek">
            <summary>
            The day of the week of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Day">
            <summary>
            The day of the month of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Hour">
            <summary>
            The hour of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Minute">
            <summary>
            The minute of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Second">
            <summary>
            The second of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Milliseconds">
            <summary>
            The millisecond of this instance
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.SYSTEMTIME.SetInfo(System.Byte[])">
            <summary>
            Sets the member values of the time structure.
            </summary>
            <param name="info">A byte array that contains the information of a time.</param>
            <exception cref="T:System.ArgumentException">Information size is incorrect</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.SYSTEMTIME.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object
            is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare
            with the current System.Object.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="T:Engage.TimeZoneInfo.TimeZoneInformation">
            <summary>
            A structure representing time zone information
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.Bias">
            <summary>
            The difference from UTC for this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardName">
            <summary>
            The name of this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardDate">
            <summary>
            The standard date for this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardBias">
            <summary>
            The difference from UTC of <see cref="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardDate"/>
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightName">
            <summary>
            The name of the time zone in Daylight Saving Time
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightDate">
            <summary>
            The daylight saving date for this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightBias">
            <summary>
            The difference from UTC of <see cref="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightDate"/>
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.TimeZoneInformation.SetBytes(System.Byte[])">
            <summary>
            Sets the member values of bias, StandardBias, 
            DaylightBias, StandardDate, DaylightDate of the structure.
            </summary>
            <param name="info">A byte array that contains the 
            information of the Tzi windows registry key.</param>
            <exception cref="T:System.ArgumentException">Information size is incorrect</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.TimeZoneInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object
            is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare
            with the current System.Object.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Engage.Util.Utility.IsValidDomain(System.String)">
            <summary>
            This validates the domain portion of a URL to exists. i.e. www.google.com.
            </summary>
            <param name="domainName"></param>
            <returns></returns>
            <remarks>Do not include http:// as part of domain name. This will return false.</remarks>
        </member>
        <member name="M:Engage.Util.Utility.Encrypt(System.String)">
            <summary>
            Encrypts the passed string
            </summary>
            <param name="s">The string you want encrypted</param>
            <returns>An Encrypted String</returns>
        </member>
        <member name="M:Engage.Util.Utility.Decrypt(System.String)">
            <summary>
            Decrypts the passed string
            </summary>
            <param name="d">The string you want decrypted</param>
            <returns>A decrypted String</returns>
        </member>
        <member name="M:Engage.Util.Utility.GetHTMLFromUrl(System.String)">
            <summary>
            This method will return the HTML from a URL to a web page.  This works
            for html pages, .aspx pages, and asp pages, (and probaby any other server side page that renders html content..)
            </summary>
            <param name="url"></param>
            <returns>string - the html</returns>
        </member>
        <member name="M:Engage.Util.Utility.ChangeRole(System.Int32,Engage.Entities.IEntityContainer,Engage.Entities.IEntityContainer,System.Int32,Engage.Authentication.User,Engage.Util.EngageSessionBase)">
            <summary>
            This method is used to change the role type for "Role" objects. It uses the AssignRequiredAffiliations
            method to get a list of parents in the tree to remove and reassign using the new object typeid.
            </summary>
            <param name="moduleTypeID"></param>
            <param name="parent"></param>
            <param name="role"></param>
            <param name="newRoleTypeID"></param>
            <param name="user"></param>
            <param name="sessionBase"></param>
            <example>ChangeRole(72, account, physician, 123, sessionBase)</example>
        </member>
        <member name="M:Engage.Util.Utility.MergeResultsLogicalAnd(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="source">An ArrayList of IDictionary objects</param>
            <returns>An IDictionary object containing the results of logically AND'ing the keys </returns>
        </member>
        <member name="M:Engage.Util.Utility.MergeResultsLogicalOr(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="source">An ArrayList of IDictionary objects</param>
            <returns>An IDictionary object containing the results of logically OR'ing the keys </returns>
        </member>
        <member name="M:Engage.Util.Utility.RemoveHtmlMarkup(System.String,System.Boolean)">
            <summary>
            Removes entites and tags from s
            </summary>
            <param name="s"></param>
            <param name="retainSpaces"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Engage.Util.Utility.RemoveHtmlEntities(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Engage.Util.Utility.RemoveHtmlTags(System.String,System.Boolean)" -->
        <member name="T:Engage.Attributes.ZipCodeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.ZipCodeAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.ZipCodeAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.ZipCodeAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Utility">
            <summary>
            A collection of static utility methods and fields that are generally useful.
            </summary>
        </member>
        <member name="F:Engage.Utility.EmailRegEx">
            <summary>
            A regular expression which will match an email address
            </summary>
            <remarks>
            Because this needs to work in JavaScript and .NET, we can't just set <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/>, we have to manually include both cases for each letter
            <para>Basic Explanation: Any valid characters, @ symbol, any valid characters, . (period), then either two letters or one of the other 25 top-level-domains</para>
            <para>
             Beginning of line or string
             Any character in this class: [a-zA-Z0-9._%\-+'], one or more repetitions
             @
             Match expression but don't capture it. [[a-zA-Z0-9\-]+\.], one or more repetitions
                 [a-zA-Z0-9\-]+\.
                     Any character in this class: [a-zA-Z0-9\-], one or more repetitions
                     Literal .
             Match expression but don't capture it. [[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Mm][Ii][Ll]|[Mm][Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt]]
                 Select from 26 alternatives
                     Any character in this class: [a-zA-Z], exactly 2 repetitions
                     [Aa][Ee][Rr][Oo]
                         Any character in this class: [Aa]
                         Any character in this class: [Ee]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Aa][Rr][Pp][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Rr]
                         Any character in this class: [Pp]
                         Any character in this class: [Aa]
                     [Aa][Ss][Ii][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Ss]
                         Any character in this class: [Ii]
                         Any character in this class: [Aa]
                     [Bb][Ii][Zz]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                         Any character in this class: [Zz]
                     [Cc][Aa][Tt]
                         Any character in this class: [Cc]
                         Any character in this class: [Aa]
                         Any character in this class: [Tt]
                     [Cc][Oo][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Mm]
                     [Cc][Oo][Oo][Pp]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Pp]
                     [Ee][dD][Uu]
                         Any character in this class: [Ee]
                         Any character in this class: [dD]
                         Any character in this class: [Uu]
                     [Gg][Oo][Vv]
                         Any character in this class: [Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Vv]
                     [Ii][Nn][Ff][Oo]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Ff]
                         Any character in this class: [Oo]
                     [Ii][Nn][Tt]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Tt]
                     [Jj][Oo][Bb][Ss]
                         Any character in this class: [Jj]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ss]
                     [Mm][Mm][Ii][Ll]
                         Any character in this class: [Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Ii]
                         Any character in this class: [Ll]
                     [Mm][Mm][Oo][Bb][Ii]
                         Any character in this class: [Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                     [Mm][Uu][Ss][Ee][Uu][Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Uu]
                         Any character in this class: [Ss]
                         Any character in this class: [Ee]
                         Any character in this class: [Uu]
                         Any character in this class: [Mm]
                     [Nn][Aa][Mm][Ee]
                         Any character in this class: [Nn]
                         Any character in this class: [Aa]
                         Any character in this class: [Mm]
                         Any character in this class: [Ee]
                     [Nn][Ee][Tt]
                         Any character in this class: [Nn]
                         Any character in this class: [Ee]
                         Any character in this class: [Tt]
                     [Oo][Rr][Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Rr]
                         Any character in this class: [Gg]
                     [Pp][Rr][Oo]
                         Any character in this class: [Pp]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Rr][Oo][Oo][Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Tt]
                     [Tt][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Tt][Rr][Aa][Vv][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Aa]
                         Any character in this class: [Vv]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Cc][Yy][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Yy]
                         Any character in this class: [Mm]
                     [Gg][Ee][Oo]
                         Any character in this class: [Gg]
                         Any character in this class: [Ee]
                         Any character in this class: [Oo]
                     [Pp][Oo][Ss][Tt]
                         Any character in this class: [Pp]
                         Any character in this class: [Oo]
                         Any character in this class: [Ss]
                         Any character in this class: [Tt]
             End of line or string</para>
            </remarks>
        </member>
        <member name="F:Engage.Utility.EmailsRegEx">
            <summary>
            A regular expression which will match a comma-delimited list of email addresses
            </summary>
            <remarks>
            Because this needs to work in JavaScript and .NET, we can't just set <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/>, we have to manually include both cases for each letter
            <para>
            Basic Explanation: Any valid characters, @ symbol, any valid characters, . (period), then either two letters or one of the other 25 top-level-domains.
            Then, any number of times, an optional additional comma, whitespace, and the same pattern as above (that is, another email address)
            </para>
            <para>
             Beginning of line or string
             Any character in this class: [a-zA-Z0-9._%\-+'], one or more repetitions
             @
             Match expression but don't capture it. [[a-zA-Z0-9\-]+\.], one or more repetitions
                 [a-zA-Z0-9\-]+\.
                     Any character in this class: [a-zA-Z0-9\-], one or more repetitions
                     Literal .
             Match expression but don't capture it. [[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Mm][Ii][Ll]|[Mm][Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt]]
                 Select from 26 alternatives
                     Any character in this class: [a-zA-Z], exactly 2 repetitions
                     [Aa][Ee][Rr][Oo]
                         Any character in this class: [Aa]
                         Any character in this class: [Ee]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Aa][Rr][Pp][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Rr]
                         Any character in this class: [Pp]
                         Any character in this class: [Aa]
                     [Aa][Ss][Ii][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Ss]
                         Any character in this class: [Ii]
                         Any character in this class: [Aa]
                     [Bb][Ii][Zz]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                         Any character in this class: [Zz]
                     [Cc][Aa][Tt]
                         Any character in this class: [Cc]
                         Any character in this class: [Aa]
                         Any character in this class: [Tt]
                     [Cc][Oo][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Mm]
                     [Cc][Oo][Oo][Pp]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Pp]
                     [Ee][dD][Uu]
                         Any character in this class: [Ee]
                         Any character in this class: [dD]
                         Any character in this class: [Uu]
                     [Gg][Oo][Vv]
                         Any character in this class: [Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Vv]
                     [Ii][Nn][Ff][Oo]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Ff]
                         Any character in this class: [Oo]
                     [Ii][Nn][Tt]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Tt]
                     [Jj][Oo][Bb][Ss]
                         Any character in this class: [Jj]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ss]
                     [Mm][Mm][Ii][Ll]
                         Any character in this class: [Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Ii]
                         Any character in this class: [Ll]
                     [Mm][Mm][Oo][Bb][Ii]
                         Any character in this class: [Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                     [Mm][Uu][Ss][Ee][Uu][Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Uu]
                         Any character in this class: [Ss]
                         Any character in this class: [Ee]
                         Any character in this class: [Uu]
                         Any character in this class: [Mm]
                     [Nn][Aa][Mm][Ee]
                         Any character in this class: [Nn]
                         Any character in this class: [Aa]
                         Any character in this class: [Mm]
                         Any character in this class: [Ee]
                     [Nn][Ee][Tt]
                         Any character in this class: [Nn]
                         Any character in this class: [Ee]
                         Any character in this class: [Tt]
                     [Oo][Rr][Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Rr]
                         Any character in this class: [Gg]
                     [Pp][Rr][Oo]
                         Any character in this class: [Pp]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Rr][Oo][Oo][Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Tt]
                     [Tt][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Tt][Rr][Aa][Vv][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Aa]
                         Any character in this class: [Vv]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Cc][Yy][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Yy]
                         Any character in this class: [Mm]
                     [Gg][Ee][Oo]
                         Any character in this class: [Gg]
                         Any character in this class: [Ee]
                         Any character in this class: [Oo]
                     [Pp][Oo][Ss][Tt]
                         Any character in this class: [Pp]
                         Any character in this class: [Oo]
                         Any character in this class: [Ss]
                         Any character in this class: [Tt]
             Match expression but don't capture it. [,\s?[a-zA-Z0-9._%\-+']+@(?:[a-zA-Z0-9\-]+\.)+(?:[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Mm][Ii][Ll]|[Mm][Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt])], any number of repetitions
                 ,\s?[a-zA-Z0-9._%\-+']+@(?:[a-zA-Z0-9\-]+\.)+(?:[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Mm][Ii][Ll]|[Mm][Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt])
                     ,
                     Whitespace, zero or one repetitions
                     Any character in this class: [a-zA-Z0-9._%\-+'], one or more repetitions
                     @
                     Match expression but don't capture it. [[a-zA-Z0-9\-]+\.], one or more repetitions
                         [a-zA-Z0-9\-]+\.
                             Any character in this class: [a-zA-Z0-9\-], one or more repetitions
                             Literal .
                     Match expression but don't capture it. [[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Mm][Ii][Ll]|[Mm][Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt]]
                         Select from 26 alternatives
                             Any character in this class: [a-zA-Z], exactly 2 repetitions
                             [Aa][Ee][Rr][Oo]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Oo]
                             [Aa][Rr][Pp][Aa]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Pp]
                                 Any character in this class: [Aa]
                             [Aa][Ss][Ii][Aa]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Ss]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Aa]
                             [Bb][Ii][Zz]
                                 Any character in this class: [Bb]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Zz]
                             [Cc][Aa][Tt]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Tt]
                             [Cc][Oo][Mm]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Mm]
                             [Cc][Oo][Oo][Pp]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Pp]
                             [Ee][dD][Uu]
                                 Any character in this class: [Ee]
                                 Any character in this class: [dD]
                                 Any character in this class: [Uu]
                             [Gg][Oo][Vv]
                                 Any character in this class: [Gg]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Vv]
                             [Ii][Nn][Ff][Oo]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Ff]
                                 Any character in this class: [Oo]
                             [Ii][Nn][Tt]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Tt]
                             [Jj][Oo][Bb][Ss]
                                 Any character in this class: [Jj]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Bb]
                                 Any character in this class: [Ss]
                             [Mm][Mm][Ii][Ll]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Ll]
                             [Mm][Mm][Oo][Bb][Ii]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Bb]
                                 Any character in this class: [Ii]
                             [Mm][Uu][Ss][Ee][Uu][Mm]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Uu]
                                 Any character in this class: [Ss]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Uu]
                                 Any character in this class: [Mm]
                             [Nn][Aa][Mm][Ee]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Ee]
                             [Nn][Ee][Tt]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Tt]
                             [Oo][Rr][Gg]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Gg]
                             [Pp][Rr][Oo]
                                 Any character in this class: [Pp]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Oo]
                             [Rr][Oo][Oo][Tt]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Tt]
                             [Tt][Ee][Ll]
                                 Any character in this class: [Tt]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Ll]
                             [Tt][Rr][Aa][Vv][Ee][Ll]
                                 Any character in this class: [Tt]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Vv]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Ll]
                             [Cc][Yy][Mm]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Yy]
                                 Any character in this class: [Mm]
                             [Gg][Ee][Oo]
                                 Any character in this class: [Gg]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Oo]
                             [Pp][Oo][Ss][Tt]
                                 Any character in this class: [Pp]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Ss]
                                 Any character in this class: [Tt]
             End of line or string</para>
            </remarks>
        </member>
        <member name="F:Engage.Utility.PhoneRegularExpressionPattern">
            <summary>
            A regular expression which will match a US phone number with (required) area code
            </summary>
            <remarks>
            <para>
            Basic explanation: Optional whitespace, open parenthesis, whitespace, then three numbers, 
            then optional whitespace, closed parenthesis, whitespace, any of the following - \ / . *, and whitespace, then three numbers,
            then optional whitespace, any of the following - \ / . * and whitespace, then four numbers,
            then optional whitespace
            </para>
             ^\s*\(?\s*
                 Beginning of line or string
                 Whitespace, any number of repetitions
                 Literal (, zero or one repetitions
                 Whitespace, any number of repetitions
             [AreaCode]: A named capture group. [\d{3}]
                 Any digit, exactly 3 repetitions
             \s*\)?\s*-?\\?/?\.?\*?\s*
                 Whitespace, any number of repetitions
                 Literal ), zero or one repetitions
                 Whitespace, any number of repetitions
                 -, zero or one repetitions
                 Literal \, zero or one repetitions
                 /, zero or one repetitions
                 Literal ., zero or one repetitions
                 Literal *, zero or one repetitions
                 Whitespace, any number of repetitions
             [FirstThree]: A named capture group. [\d{3}]
                 Any digit, exactly 3 repetitions
             \s*-?\\?/?\.?\*?\s*
                 Whitespace, any number of repetitions
                 -, zero or one repetitions
                 Literal \, zero or one repetitions
                 /, zero or one repetitions
                 Literal ., zero or one repetitions
                 Literal *, zero or one repetitions
                 Whitespace, any number of repetitions
             [SecondFour]: A named capture group. [\d{4}]
                 Any digit, exactly 4 repetitions
             \s*$
                 Whitespace, any number of repetitions
                 End of line or string
            </remarks>
        </member>
        <member name="F:Engage.Utility.NullString">
            <summary>
            The SQL representation of null
            </summary>
        </member>
        <member name="F:Engage.Utility.Nbsp">
            <summary>
            The HTML representation of a non-breaking space
            </summary>
        </member>
        <member name="F:Engage.Utility.DefaultConnectionStringName">
            <summary>
            The name of the connection string used by default in our products (and DotNetNuke).
            </summary>
        </member>
        <member name="M:Engage.Utility.AddQuotes(System.String)">
            <summary>
            Escapes quotes in a SQL string.
            </summary>
            <param name="value">The string value to escape.</param>
            <returns><paramref name="value"/> with quotes escaped for SQL</returns>
        </member>
        <member name="M:Engage.Utility.HasValue(System.String)">
            <summary>
            Determines whether the specified <paramref name="value"/> is null, empty, or only whitespace.
            </summary>
            <param name="value">The value to test.</param>
            <returns>
            <c>true</c> if the specified value is not null, empty, or only whitespace; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Utility.EncodeForImageSrc(System.String)">
            <summary>
            When setting the <see cref="P:System.Web.UI.WebControls.Image.ImageUrl"/> of <see cref="T:System.Web.UI.WebControls.Image"/> control, spaces are incorrectly encoded.
            Use this method to correctly encode the full image path before setting the <see cref="P:System.Web.UI.WebControls.Image.ImageUrl"/> property.
            </summary>
            <remarks>A possible workaround from Microsoft: 
                <blockquote>Thanks for reporting this issue. It is actually the combination of 3 issues in ASP.NET and IIS: 
                    <ol>
                        <li> By default, IIS does not allow URLs to contain "+" characters, whether encoded or not (http://blogs.iis.net/thomad/archive/2007/12/17/iis7-rejecting-urls-containing.aspx). To allow this character, set in web.config. </li>
                        <li> The ASP.NET method HttpServerUtility.UrlEncode() does not escape the "%" character. This is by design, since we don't want to double-escape percent characters. That is, we want to allow things like HttpServerUtillity.UrlEncode("http://www.foo.com/foo%20bar.aspx"). However, System.Uri.EscapeUriString() does escape the "%" character, so you should use this method when you want to escape the "%" character. </li>
                        <li> Neither HttpServerUtility.UrlEncode() nor System.Uri.EscapeUriString() escape the "#" character. This is by design, since the "#" character separates the fragment from the rest of the URL. Since these APIs just take an arbitrary string, they cannot know whether you want to escape the "#" character or not, and they decided to not escape it (which is the most common case). The workaround is to manually escape the "#" character if needed. </li>
                    </ol>
                So the complete workaround for this bug is to allow the "+" character in IIS, use System.Uri.EscapeUriString() instead of HttpServerUtility.UrlEncode(), and manually escape the "#" character.
                </blockquote>
            </remarks>
            <param name="filePath">The file path.</param>
            <returns>The file path correctly encoded for the image tag's src attribute.</returns>
        </member>
        <member name="M:Engage.Utility.ValidateEmailAddress(System.String)">
            <summary>
            Validates the given email address.
            </summary>
            <param name="emailAddress">The email address to validate.</param>
            <returns>Whether the specified email address is in a valid format.</returns>
        </member>
        <member name="M:Engage.Utility.ValidateEmailAddress(System.String,System.Boolean)">
            <summary>
            Validates an email address, or multiple comma-delimited email addresses.
            </summary>
            <param name="emailAddress">The email address(es) to validate.</param>
            <param name="commaDelimited">
            if set to <c>true</c>, <paramref name="emailAddress"/> could be multiple, comma-delimited email addresses,
            otherwise it must be a single email address.
            </param>
            <returns>Whether the specified email address(es) are in a valid format.</returns>
        </member>
        <member name="M:Engage.Utility.IsInteger(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> is an integer value.  Uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="s">The string to check.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.String"/> is an integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Utility.IsInteger(System.String,System.IFormatProvider)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> is an integer value.
            </summary>
            <param name="s">The string to check.</param>
            <param name="culture">The culture to use when trying to parse the integer.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.String"/> is an integer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Utility.IsBoolean(System.String)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> is a boolean value.  Uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="s">The string to check.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.String"/> is a boolean; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Utility.ParseIntegerList(System.String[])">
            <summary>
            Parses a <see cref="T:System.String"/> array into a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Int32"/>.  Uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="splitIntegers">A <see cref="T:System.String"/> array of integer values.</param>
            <exception cref="T:System.FormatException">If any value is not an integer</exception>&gt;
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of the values in <paramref name="splitIntegers"/> parsed as <see cref="T:System.Int32"/>s.</returns>
        </member>
        <member name="M:Engage.Utility.ParseIntegerList(System.String[],System.IFormatProvider)">
            <summary>
            Parses a <see cref="T:System.String"/> array into a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="splitIntegers">A <see cref="T:System.String"/> array of integer values.</param>
            <param name="culture">The culture to use when parsing each <see cref="T:System.String"/> in <paramref name="splitIntegers"/></param>
            <exception cref="T:System.FormatException">If any value is not an integer</exception>&gt;
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of the values in <paramref name="splitIntegers"/> parsed as <see cref="T:System.Int32"/>s.</returns>
        </member>
        <member name="M:Engage.Utility.ParseNullableDateTime(System.String)">
            <summary>
            Parses a string, converting to a <see cref="T:System.DateTime"/> if possible using <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, otherwise returning <c>null</c>.
            </summary>
            <param name="dateValue">The string to parse.</param>
            <returns><paramref name="dateValue"/> as a DateTime, if possible, otherwise <c>null</c></returns>
        </member>
        <member name="M:Engage.Utility.ParseNullableDateTime(System.String,System.IFormatProvider)">
            <summary>
            Parses a string, converting to a <see cref="T:System.DateTime"/> if possible, otherwise returning <c>null</c>.
            </summary>
            <param name="dateValue">The date value.</param>
            <param name="culture">The culture to use when parsing the <see cref="T:System.DateTime"/>.</param>
            <returns>
            <paramref name="dateValue"/> as a DateTime, if possible, otherwise <c>null</c>
            </returns>
        </member>
        <member name="M:Engage.Utility.GetRandomSeed">
            <summary>
            Gets a random number to use as a seed.
            </summary>
            <returns>A random number seed</returns>
        </member>
        <member name="M:Engage.Utility.GetRandomNumberGenerator">
            <summary>
            Gets a random number generator.
            </summary>
            <returns>A new, properly initialized instance of the <see cref="T:System.Random"/> class.</returns>
        </member>
        <member name="M:Engage.Utility.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Compares two <see cref="T:System.String"/>s for equality, using the Invariant Culture and ignoring case.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns><c>true</c> if <paramref name="value1"/> is the same as <paramref name="value2"/> (without regard to case); otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Utility.EqualsIgnoreCase(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Compares two <see cref="T:System.String"/>s for equality, using given <paramref name="culture"/> and ignoring case.
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="culture">The culture to use in determining case insensitivity.</param>
            <returns><c>true</c> if <paramref name="value1"/> is the same as <paramref name="value2"/> (without regard to case); otherwise <c>false</c></returns>
        </member>
        <member name="M:Engage.Utility.Serialize(System.Object)">
            <summary>
            Serializes the specified value as binary data into a byte array.
            </summary>
            <param name="value">The value to be serialized.</param>
            <returns>A byte array representing the value in binary formatting</returns>
        </member>
        <member name="M:Engage.Utility.DeSerialize(System.Byte[])">
            <summary>
            Deserializes the data into an object.
            </summary>
            <param name="data">The data to deserialize.</param>
            <returns>An object represented in binary formatting in the given byte array</returns>
        </member>
        <member name="M:Engage.Utility.ContainsCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Determines whether the specified control's CssClass property contains the given CSS class.
            </summary>
            <param name="control">The control to check.</param>
            <param name="className">Name of the CSS class.</param>
            <returns>
            <c>true</c> if the specified control contains the given CSS class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Utility.ContainsCssClass(System.String,System.String)">
            <summary>
            Determines whether the specified control's CssClass property contains the given CSS class.
            </summary>
            <param name="cssClass">The control to check.</param>
            <param name="className">Name of the CSS class.</param>
            <returns>
            <c>true</c> if the specified control contains the given CSS class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Utility.AddCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Adds the given CSS class to the specified control's CssClass property if not already present.
            </summary>
            <param name="control">The control.</param>
            <param name="className">Name of the CSS class to add.</param>
        </member>
        <member name="M:Engage.Utility.AddCssClass(System.String,System.String)">
            <summary>
            Adds the given CSS class to the specified control's CssClass property if not already present.
            </summary>
            <param name="cssClass">The control.</param>
            <param name="className">Name of the CSS class to add.</param>
            <returns>The specified control's CssClass property with the <paramref name="className"/> appended.</returns>
        </member>
        <member name="M:Engage.Utility.RemoveCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Removes the given CSS class from the specified control's CssClass property, if it is present.
            </summary>
            <param name="control">The control.</param>
            <param name="className">Name of the CSS class to remove.</param>
        </member>
        <member name="M:Engage.Utility.RemoveCssClass(System.String,System.String)">
            <summary>
            Removes the given CSS class from the specified control's CssClass property, if it is present.
            </summary>
            <param name="cssClass">The control.</param>
            <param name="className">Name of the CSS class to remove.</param>
            <returns>The specified control's CssClass property without <paramref name="className"/> in the list.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cssClass"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="className"/> is null.</exception>
        </member>
        <member name="M:Engage.Utility.ToggleCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            Toggles a CSS class in the specified control's CssClass property; i.e. removes it if it is present, and adds it if it is missing.
            </summary>
            <param name="control">The control.</param>
            <param name="className">Name of the CSS class to toggle.</param>
        </member>
        <member name="M:Engage.Utility.ToggleCssClass(System.String,System.String)">
            <summary>
            Toggles a CSS class in the specified control's CssClass property; i.e. removes it if it is present, and adds it if it is missing.
            </summary>
            <param name="cssClass">The control.</param>
            <param name="className">Name of the CSS class to toggle.</param>
            <returns>The specified control's CssClass property without <paramref name="className"/> in the list if it was present, or with <paramref name="className"/> if it was not already in the list.</returns>
        </member>
        <member name="M:Engage.Utility.RegisterServerValidationMessageScript(System.Web.UI.TemplateControl)">
            <summary>
            Registers a script to display error messages from server-side validation as the specified <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> loads from a postback.
            </summary>
            <remarks>
            Must be called in the PreRender if used to validate against the Text property of DNNTextEditor controls, otherwise Text will not be populated.
            Must set the ErrorMessage manually if using a resourcekey, otherwise the resourcekey will not have overridden the ErrorMessage property.
            </remarks>
            <param name="ctrl">The <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> which is being posted back.</param>
        </member>
        <member name="M:Engage.Utility.RegisterServerValidationMessageScript(System.Web.UI.TemplateControl,System.String)">
            <summary>
            Registers a script to display error messages from server-side validation as the specified <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> loads from a postback.
            </summary>
            <remarks>
            Must be called in the PreRender if used to validate against the Text property of DNNTextEditor controls, otherwise Text will not be populated.
            Must set the ErrorMessage manually if using a resourcekey, otherwise the resourcekey will not have overridden the ErrorMessage property.
            </remarks>
            <param name="ctrl">The <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> which is being posted back.</param>
            <param name="validationGroup">The validation group against which to validate.</param>
        </member>
        <member name="M:Engage.Utility.FindControlRecursive(System.Web.UI.Control,System.String)">
            <summary>
            Finds the first <see cref="T:System.Web.UI.Control"/> with the given <paramref name="id"/>.
            Searches through all levels of the 
            </summary>
            <remarks>from http://www.codinghorror.com/blog/archives/000307.html</remarks>
            <param name="root">The outermost containing <see cref="T:System.Web.UI.Control"/> in which to search.</param>
            <param name="id">The ID of the <see cref="T:System.Web.UI.Control"/> being sought, set in <see cref="P:System.Web.UI.Control.ID"/></param>
            <returns>The first <see cref="T:System.Web.UI.Control"/> with the given <paramref name="id"/> that is contained by <paramref name="root"/>.</returns>
        </member>
        <member name="M:Engage.Utility.FindParentControl``1(System.Web.UI.Control)">
            <summary>
            Traverses the control hierarchy the given control <paramref name="child"/> to find a parent control with the given type <typeparamref name="T"/>,
            or <c>null</c> if none exists.
            </summary>
            <typeparam name="T">The type of parent for which to search</typeparam>
            <param name="child">The child control for whose parent to search.</param>
            <returns>A parent of <paramref name="child"/> with type <typeparamref name="T"/>, or <c>null</c> if none exists.</returns>
        </member>
        <member name="M:Engage.Utility.GetHtmlFromUrl(System.String)">
            <summary>
            Gets the response from the given URL as a string.
            </summary>
            <param name="url">The URL to get the response from.</param>
            <returns>The response from the given URL</returns>
            <exception cref="T:System.Exception">Unable to read HTML from the specified URL</exception>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32[])">
            <summary>
            Combines the given hash codes into a single unique hash value.
            </summary>
            <param name="hashes">The hash values to combine.</param>
            <returns>A hash code comprised of the given <paramref name="hashes"/></returns>
        </member>
        <member name="M:Engage.Utility.GetEntryHash(System.Object)">
            <summary>
            Gets the entry hash for an object.
            </summary>
            <param name="entry">The entry.</param>
            <returns>An object's entry hash</returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object[])">
            <summary>
            Combines the hash codes of the given objects into a single unique hash value.
            </summary>
            <param name="objects">The objects whose has values to combine.</param>
            <returns>A hash code comprised of the given <paramref name="objects"/>' hash codes</returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Combines the given hash codes into a single unique hash value.
            </summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <returns>
            A hash code comprised of the given hashes
            </returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines the given hash codes into a single unique hash value.
            </summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <returns>
            A hash code comprised of the given hashes
            </returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines the given hash codes into a single unique hash value.
            </summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <param name="hash4">The fourth hash code.</param>
            <returns>
            A hash code comprised of the given hashes
            </returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines the given hash codes into a single unique hash value.
            </summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <param name="hash4">The fourth hash code.</param>
            <param name="hash5">The fifth hash code.</param>
            <returns>
            A hash code comprised of the given hashes
            </returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object)">
            <summary>
            Combines the hash codes of the given objects into a single unique hash value.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <returns>
            A hash code comprised of the given objects' hash codes
            </returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of the given objects into a single unique hash value.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="obj3">The third hash code.</param>
            <returns>
            A hash code comprised of the given objects' hash codes
            </returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of the given objects into a single unique hash value.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="obj3">The third hash code.</param>
            <param name="obj4">The fourth hash code.</param>
            <returns>
            A hash code comprised of the given objects' hash codes
            </returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Combines the hash codes of the given objects into a single unique hash value.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="obj3">The third hash code.</param>
            <param name="obj4">The fourth hash code.</param>
            <param name="obj5">The fifth hash code.</param>
            <returns>
            A hash code comprised of the given objects' hash codes
            </returns>
        </member>
        <member name="M:Engage.Utility.CreateSqlParam``1(System.Data.SqlDbType,System.String,System.Nullable{``0})">
            <summary>
            Creates a SQL parameter of the given <paramref name="parameterType"/>.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <typeparam name="T">The type of the (value-type) parameter value</typeparam>
            <param name="parameterType">SQL column type of the parameter.</param>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>
            A SqlParameter with the correct value, and type.
            </returns>
        </member>
        <member name="M:Engage.Utility.CreateSqlParam``1(System.Data.SqlDbType,System.String,``0)">
            <summary>
            Creates a SQL parameter of the given <paramref name="parameterType"/>.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <typeparam name="T">The type of the (reference-type) parameter value</typeparam>
            <param name="parameterType">SQL column type of the parameter.</param>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>
            A SqlParameter with the correct value, and type.
            </returns>
        </member>
        <member name="M:Engage.Utility.CreateTextParam(System.String,System.String)">
            <summary>
            Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NText"/>) SQL parameter, without size bounds.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateVarcharParam(System.String,System.String)">
            <summary>
            Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NVarChar"/>) SQL parameter, without size bounds.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateVarcharParam(System.String,System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NVarChar"/>) SQL parameter, setting and checking the bounds of the value within the parameter.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <param name="size">The size of the field in the database.</param>
            <returns>A SqlParameter with the correct value, type, and capacity.</returns>
        </member>
        <member name="M:Engage.Utility.CreateCharParam(System.String,System.String)">
            <summary>
            Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NChar"/>) SQL parameter, without size bounds.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateCharParam(System.String,System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NChar"/>) SQL parameter, setting and checking the bounds of the value within the parameter.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <param name="size">The size of the field in the database.</param>
            <returns>A SqlParameter with the correct value, type, and capacity.</returns>
        </member>
        <member name="M:Engage.Utility.CreateGuidParam(System.String,System.Nullable{System.Guid})">
            <summary>
            Creates a <see cref="T:System.Guid"/> (<see cref="F:System.Data.SqlDbType.UniqueIdentifier"/>) SQL parameter, 
            setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <see cref="F:System.Guid.Empty"/>
            or <see cref="T:System.Nullable`1"/> without a value.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDateTimeParam(System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates a <see cref="T:System.DateTime"/> (<see cref="F:System.Data.SqlDbType.DateTime"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is its initial value,
            <see cref="F:System.DateTime.MinValue"/>, <see cref="F:System.DateTime.MaxValue"/>, or <see cref="T:System.Nullable`1"/> without a value.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDateTimeParam(System.String,System.String)">
            <summary>
            Creates a <see cref="T:System.DateTime"/> (<see cref="F:System.Data.SqlDbType.DateTime"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c> or empty.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Engage.Utility.CreateIntegerParam(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates an <see cref="T:System.Int32"/> (<see cref="F:System.Data.SqlDbType.Int"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is 
            <see cref="F:System.Int32.MaxValue"/>, <see cref="F:System.Int32.MinValue"/>, or <see cref="T:System.Nullable`1"/> without a value.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDecimalParam(System.String,System.Nullable{System.Decimal})">
            <summary>
            Creates a <see cref="T:System.Decimal"/> (<see cref="F:System.Data.SqlDbType.Decimal"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is 
            <see cref="F:System.Decimal.MaxValue"/>, <see cref="F:System.Decimal.MinValue"/>, or <see cref="T:System.Nullable`1"/> without a value.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateBitParam(System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:System.Boolean"/> (<see cref="F:System.Data.SqlDbType.Bit"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> 
            if <paramref name="value"/> is <see cref="T:System.Nullable`1"/> without a value.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlParameter"/> with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDoubleParam(System.String,System.Nullable{System.Double})">
            <summary>
            Creates a <see cref="T:System.Double"/> (<see cref="F:System.Data.SqlDbType.Float"/> SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <see cref="F:System.Double.MaxValue"/>,
            <see cref="F:System.Double.MinValue"/>, or <see cref="T:System.Nullable`1"/> without a value.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlParameter"/> with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateImageParam(System.String,System.Byte[])">
            <summary>
            Creates a <see cref="T:System.Byte"/>[] (<see cref="F:System.Data.SqlDbType.Image"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is null, or an empty array.
            </summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlParameter"/> with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.GetConnection(System.String)">
            <summary>
            Gets a connection to the database specified in the given <paramref name="connectionStringName"/>.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
            <returns>A connection to the database</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The <paramref name="connectionStringName"/> key was not found in the config file</exception>
        </member>
        <member name="M:Engage.Utility.GetConnection">
            <summary>
            Gets a connection to the database specified in <see cref="F:Engage.Utility.DefaultConnectionStringName"/>
            </summary>
            <returns>A connection to the database</returns>
        </member>
        <member name="M:Engage.Utility.GetDataReader(System.String)">
            <summary>
            Executes the SQL string against the default database connection, and builds an <see cref="T:System.Data.IDataReader"/> with the <see cref="F:System.Data.CommandBehavior.CloseConnection"/>.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> of the results from the SQL execution</returns>
            <exception cref="T:System.ApplicationException">An error happens while executing the SQL</exception>
        </member>
        <member name="M:Engage.Utility.ExecuteNonQuery(System.String)">
            <summary>
            Executes the SQL statement against the default database connection, and returns the number of rows affected
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>The number of rows affected by the execution of the SQL script</returns>
            <exception cref="T:System.ApplicationException">An error happens while executing the SQL</exception>
        </member>
        <member name="M:Engage.Utility.GetDataTable(System.String)">
            <summary>
            Executes the SQL string against the default database connection, and builds a <see cref="T:System.Data.DataTable"/>.  Sets <see cref="P:System.Data.DataTable.Locale"/> to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> of the results from the SQL execution</returns>
        </member>
        <member name="M:Engage.Utility.GetDataTable(System.String,System.Globalization.CultureInfo)">
            <summary>
            Executes the SQL string against the default database connection, and builds a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="culture">The culture of the <see cref="T:System.Data.DataTable"/> returned.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> of the results from the SQL execution
            </returns>
            <exception cref="T:System.ApplicationException">An error happens while executing the SQL</exception>
        </member>
        <member name="M:Engage.Utility.GetSqlCommand">
            <summary>
            Gets a <see cref="T:System.Data.SqlClient.SqlCommand"/> for the default database connection.
            </summary>
            <returns>A <see cref="T:System.Data.SqlClient.SqlCommand"/> for the default database connection</returns>
        </member>
        <member name="P:Engage.Utility.IsLoggedIn">
            <summary>
            Gets a value indicating whether the current web user is logged in to the current website, or <c>false</c> if this is called outside of a website request.
            </summary>
            <value>
            <c>true</c> if this is called in a web request and the current user is logged in; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Engage.Versions.NullVersionManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Versions.ObjectViewerCtl">
            <summary>
            Summary description for ObjectViewerCtl.
            </summary>
        </member>
        <member name="F:Engage.Versions.ObjectViewerCtl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Engage.Versions.ObjectViewerCtl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Versions.ObjectViewerCtl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Engage.Versions.Version">
            <summary>
            Summary description for Version.
            </summary>
        </member>
        <member name="T:Engage.Versions.VersionView">
            <summary>
            Summary description for SystemAttributesView.
            </summary>
        </member>
        <member name="F:Engage.Versions.VersionView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Engage.Versions.VersionView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Versions.VersionView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
