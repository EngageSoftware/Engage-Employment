<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cbIsFilled.Text" xml:space="preserve">
    <value>Is Filled</value>
  </data>
  <data name="cbIsHot.Text" xml:space="preserve">
    <value>Is Hot</value>
  </data>
  <data name="cvCategory.Text" xml:space="preserve">
    <value>Category is required</value>
  </data>
  <data name="cvLocation.Text" xml:space="preserve">
    <value>Location is required</value>
  </data>
  <data name="cvPosition.Text" xml:space="preserve">
    <value>Position is required</value>
  </data>
  <data name="cvUniquePositionLocation.Text" xml:space="preserve">
    <value>The combination of this postion and location already exists</value>
  </data>
  <data name="DeleteConfirm.Text" xml:space="preserve">
    <value>Are you sure you want to delete this job and all associated applications?  This cannot be undone.</value>
  </data>
  <data name="DesiredQualificationsMaxLength.Text" xml:space="preserve">
    <value>Maximum number of characters (including markup) allowed is {0}.  You provided {1}.</value>
  </data>
  <data name="DesiredQualificationsRequired.Text" xml:space="preserve">
    <value>Desired Qualifications is required</value>
  </data>
  <data name="lblJobsHeader.Help" xml:space="preserve">
    <value>Jobs are the specific openings you have at specific locations.  Jobs are what an applicant will apply for (rather than positions).  Every job is for a specific position at a specific locaiton.  Each job has a category.  Jobs have required and desired qualifications for their applicants.  Each location may only have one opening for each position, so you will have to differentiate two similar positions to have them both available to the same location.</value>
  </data>
  <data name="lblJobsHeader.Text" xml:space="preserve">
    <value>Add/Edit Jobs</value>
  </data>
  <data name="lnkCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lnkDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="lnkUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>The category that this job belongs under.  Category will be displayed on the Job Listing page.</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Job Category:</value>
  </data>
  <data name="lblDesiredQualifications.Help" xml:space="preserve">
    <value>Use the desired qualifications field to let applicants' know what qualifications will increase their chances of being accepted for this job opening (that is, the specific needs for this position at this location).  This will be displayed on the job details page, and will also be used to return keyword search results.</value>
  </data>
  <data name="lblDesiredQualifications.Text" xml:space="preserve">
    <value>Desired Qualifications:</value>
  </data>
  <data name="lblIsFilled.Help" xml:space="preserve">
    <value>Check this box if this opening has been filled.  It will remove it from searches and listings.</value>
  </data>
  <data name="lblIsFilled.Text" xml:space="preserve">
    <value>Is Filled:</value>
  </data>
  <data name="lblIsHot.Help" xml:space="preserve">
    <value>If checked, this opening is a "Hot Job," which means it will be displayed on the Job Listing page.</value>
  </data>
  <data name="lblIsHot.Text" xml:space="preserve">
    <value>Is Hot:</value>
  </data>
  <data name="lblLocation.Help" xml:space="preserve">
    <value>The location for this job opening.  Both the location and state will be displayed on the Job Listing and Job Details pages, and it can also be searched for.</value>
  </data>
  <data name="lblLocation.Text" xml:space="preserve">
    <value>Job Location:</value>
  </data>
  <data name="lblName.Help" xml:space="preserve">
    <value>The position that this job fills for the location.  Along with the position comes the job description.  Position title will appear on the Job Listing page and the Job Details page, the description will be displayed only on the Job Details page.</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Job Position:</value>
  </data>
  <data name="lblRequiredQualifications.Help" xml:space="preserve">
    <value>Use the required qualifications field to let applicants' know what qualifications they must have to be accepted for this job opening, that is, the specific needs for this position at this location.  This will be displayed on the job details page, and will also be used to return keyword search results.</value>
  </data>
  <data name="lblRequiredQualifications.Text" xml:space="preserve">
    <value>Required Qualifications:</value>
  </data>
  <data name="RequiredQualificationsMaxLength.Text" xml:space="preserve">
    <value>Maximum number of characters (including markup) allowed is {0}.  You provided {1}.</value>
  </data>
  <data name="RequiredQualificationsRequired.Text" xml:space="preserve">
    <value>Required Qualifications is required</value>
  </data>
  <data name="SelectACategory.Text" xml:space="preserve">
    <value>[Please select a Category]</value>
  </data>
  <data name="SelectALocation.Text" xml:space="preserve">
    <value>[Please select a Location]</value>
  </data>
  <data name="SelectAPosition.Text" xml:space="preserve">
    <value>[Please select a Position]</value>
  </data>
  <data name="cvSortOrder.Text" xml:space="preserve">
    <value>Sort Order must be a whole number</value>
  </data>
  <data name="lblSortOrder.Text" xml:space="preserve">
    <value>Sort Order</value>
  </data>
  <data name="lblSortOrder.Help" xml:space="preserve">
    <value>A relative order used for sorting.  Jobs in the job listing are sorted first by their Sort Order, then by their category, and lastly by their position.</value>
  </data>
  <data name="lblEmailAddress.Help" xml:space="preserve">
    <value>The email address that should receive notifcations when an applicant applies for this position</value>
  </data>
  <data name="lblEmailAddress.Text" xml:space="preserve">
    <value>Application Notification Email: </value>
  </data>
  <data name="regexEmailAddress.Text" xml:space="preserve">
    <value>The provided email address is invalid, please provide a valid email address</value>
  </data>
  <data name="rfvEmailAddress.Text" xml:space="preserve">
    <value>Application Notification Email is required</value>
  </data>
  <data name="ExpireDateTypeValidator.Text" xml:space="preserve">
    <value>Expire Date must be a valid date</value>
  </data>
  <data name="lblExpireDate.Help" xml:space="preserve">
    <value>Select the day on which this job posting should stop being shown.  At this point, the listing will not appear in the job listing and will not be accessible from the job details page, so no more applications can be submitted for it.  It will still be visible from the Manage Jobs page, and applications for it will be visible from the Manage Applications page.  Leave this blank to allow the job posting to be viewed indefinitely.</value>
  </data>
  <data name="lblExpireDate.Text" xml:space="preserve">
    <value>Expire Date</value>
  </data>
  <data name="lblStartDate.Help" xml:space="preserve">
    <value>Select when this job posting should begin being displayed.</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="StartDateRequiredValidator.Text" xml:space="preserve">
    <value>Start Date is required</value>
  </data>
  <data name="StartDateTypeValidator.Text" xml:space="preserve">
    <value>Start Date must be a valid date</value>
  </data>
  <data name="StartExpireDateCompareValidator.Text" xml:space="preserve">
    <value>Expire Date must occur after Start Date</value>
  </data>
  <data name="lblApplicationUrl.Help" xml:space="preserve">
    <value>Enter the URL to which an applicant should be redirected when they click the "Apply for this Job" link.  Enter a URL here only if you want to circumvent the application functionality of this module.</value>
  </data>
  <data name="lblApplicationUrl.Text" xml:space="preserve">
    <value>Application URL</value>
  </data>
</root>