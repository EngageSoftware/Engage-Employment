<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Job Detail Settings</value>
  </data>
  <data name="lblApplicationEmailAddress.Help" xml:space="preserve">
    <value>Specify the email address(es) that email applicaitons will be sent to.  These will be used as the default email address(es) for new jobs that are displayed in this module.  Separate multiple email addresses with commas.</value>
  </data>
  <data name="lblApplicationEmailAddress.Text" xml:space="preserve">
    <value>Default Email Address to which to Send Applications:</value>
  </data>
  <data name="lblFriendEmailAddress.Help" xml:space="preserve">
    <value>Specify the email address that emails send to a friend will come from</value>
  </data>
  <data name="lblFriendEmailAddress.Text" xml:space="preserve">
    <value>Email Address from which to Email a Friend:</value>
  </data>
  <data name="btnUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnNewLeadItem.Text" xml:space="preserve">
    <value>Add New Lead Option</value>
  </data>
  <data name="btnSaveNewLead.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteConfirm.Text" xml:space="preserve">
    <value>Are you sure you want to delete this Lead Option?</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="lblDisplayCoverLetter.Help" xml:space="preserve">
    <value>Choose whether you would like to display or require a field to allow the applicant to upload a cover letter.</value>
  </data>
  <data name="lblDisplayCoverLetter.Text" xml:space="preserve">
    <value>Display Cover Letter Field</value>
  </data>
  <data name="lblDisplayLead.Help" xml:space="preserve">
    <value>Choose whether you would like to display a field to collect how the applicant heard about the job opening.  If displayed, you can then define available options for the list.</value>
  </data>
  <data name="lblDisplayLead.Text" xml:space="preserve">
    <value>Display Lead Field</value>
  </data>
  <data name="lblDisplaySalary.Help" xml:space="preserve">
    <value>Choose whether you would like to display or require a field to allow the applicant to specify a salary requirement.</value>
  </data>
  <data name="lblDisplaySalary.Text" xml:space="preserve">
    <value>Display Salary Requirement Field</value>
  </data>
  <data name="lblLeadItems.Help" xml:space="preserve">
    <value>Define the options you would like to be available to the applicant to select as how they heard about the job opening.</value>
  </data>
  <data name="lblLeadItems.Text" xml:space="preserve">
    <value>Define Lead Options</value>
  </data>
  <data name="Name.Header" xml:space="preserve">
    <value>Lead Option</value>
  </data>
  <data name="Save.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Hidden.Text" xml:space="preserve">
    <value>Hidden</value>
  </data>
  <data name="Optional.Text" xml:space="preserve">
    <value>Optional</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="lblDisplayMessage.Help" xml:space="preserve">
    <value>Choose whether you would like to display or require a field to allow applicants to specify a message with their application.</value>
  </data>
  <data name="lblDisplayMessage.Text" xml:space="preserve">
    <value>Display Message Field</value>
  </data>
  <data name="lblRequireRegistration.Help" xml:space="preserve">
    <value>Choose whether you will allow anonymous users to apply for jobs.</value>
  </data>
  <data name="lblRequireRegistration.Text" xml:space="preserve">
    <value>Require Applicants to be DNN Users</value>
  </data>
  <data name="lblNoLeadItems.Text" xml:space="preserve">
    <value>There are no lead options defined.</value>
  </data>
  <data name="cvSaveLeadRequirement.Text" xml:space="preserve">
    <value>You must provide a Lead Option if you are going to display the Lead field.</value>
  </data>
  <data name="rfvNewLead.Text" xml:space="preserve">
    <value>You must supply a name for the Lead Option</value>
  </data>
  <data name="lblEnableDnnSearch.Help" xml:space="preserve">
    <value>If checked, all jobs that can be displayed in this module will appear in DNN site-wide search results.  Results will be searched on Job Description, Job Title, and Qualifications, and will display on the results page with Job Title, Location, and Region.</value>
  </data>
  <data name="lblEnableDnnSearch.Text" xml:space="preserve">
    <value>Enable Indexing by DNN Search</value>
  </data>
  <data name="ControlTitle_options.Text" xml:space="preserve">
    <value>Engage: Employment Job Detail Options</value>
  </data>
  <data name="ApplicationEmailPatternValidator.Text" xml:space="preserve">
    <value>The Email Address to which to Send Applications is not a valid list of email addresses, please validate the format of the email addresses.</value>
  </data>
  <data name="ApplicationEmailRequired.Text" xml:space="preserve">
    <value>Default Email Address to which to Send Applications is required</value>
  </data>
  <data name="FriendEmailPatternValidator.Text" xml:space="preserve">
    <value>The Email Address from which to Email a Friend is not a valid email address, please validate the format of the email address.</value>
  </data>
  <data name="FriendEmailRequired.Text" xml:space="preserve">
    <value>Email Address from which to Email a Friend is required</value>
  </data>
  <data name="lblShowCloseDate.Text" xml:space="preserve">
    <value>Show Close Date</value>
  </data>
  <data name="lblDisplayEmail.Help" xml:space="preserve">
    <value>Choose whether you would like to display or require a field to allow applicants to specify their email address with their application.</value>
  </data>
  <data name="lblDisplayEmail.Text" xml:space="preserve">
    <value>Display Email Field</value>
  </data>
  <data name="lblDisplayName.Help" xml:space="preserve">
    <value>Choose whether you would like to display or require a field to allow applicants to specify their name with their application.</value>
  </data>
  <data name="lblDisplayName.Text" xml:space="preserve">
    <value>Display Name Field</value>
  </data>
  <data name="lblDisplayPhone.Help" xml:space="preserve">
    <value>Choose whether you would like to display or require a field to allow applicants to specify their phone number with their application.</value>
  </data>
  <data name="lblDisplayPhone.Text" xml:space="preserve">
    <value>Display Phone Field</value>
  </data>
  <data name="lblDisplayResume.Help" xml:space="preserve">
    <value>Choose whether you would like to display or require a field to allow the applicant to upload a resumé.</value>
  </data>
  <data name="lblDisplayResume.Text" xml:space="preserve">
    <value>Display Resumé Field</value>
  </data>
</root>